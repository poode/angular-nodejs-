"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var prosemirror_history_1 = require("prosemirror-history");
var schema_1 = require("./schema");
var align_rules_1 = require("./align-rules");
var prosemirror_utils_1 = require("../prosemirror-utils");
var prosemirror_list_utils_1 = require("../prosemirror-list-utils");
var inlineCommand = {
    bold: function () { return prosemirror_utils_1.toggleBold; },
    italic: function () { return prosemirror_utils_1.toggleItalic; },
    createLink: function (attr) { return prosemirror_utils_1.createLink(attr); },
    unlink: function () { return prosemirror_utils_1.removeMark(schema_1.schema.marks.link); },
    underline: function () { return prosemirror_utils_1.toggleUnderline; },
    strikethrough: function () { return prosemirror_utils_1.toggleStrikethrough; },
    subscript: function () { return prosemirror_utils_1.toggleSubscript; },
    superscript: function () { return prosemirror_utils_1.toggleSuperscript; }
};
var blockCommand = {
    format: function (formatAttr) { return prosemirror_utils_1.format(formatAttr); },
    alignLeft: function () { return prosemirror_utils_1.alignBlocks(align_rules_1.alignLeftRules); },
    alignCenter: function () { return prosemirror_utils_1.alignBlocks(align_rules_1.alignCenterRules); },
    alignRight: function () { return prosemirror_utils_1.alignBlocks(align_rules_1.alignRightRules); },
    alignJustify: function () { return prosemirror_utils_1.alignBlocks(align_rules_1.alignRemoveRules); },
    indent: function () { return prosemirror_utils_1.indent; },
    outdent: function () { return prosemirror_utils_1.outdent; },
    // think about changing the command name.
    insertOrderedList: function () { return prosemirror_list_utils_1.toggleOrderedList; },
    // think about changing the command name.
    insertUnorderedList: function () { return prosemirror_list_utils_1.toggleUnorderedList; },
    getHTML: function () { return prosemirror_utils_1.getHTML; },
    setHTML: function (content) { return prosemirror_utils_1.setHTML(content); },
    undo: function () { return prosemirror_history_1.undo; },
    redo: function () { return prosemirror_history_1.redo; },
    insertImage: function (attrs) { return prosemirror_utils_1.insertImage(attrs); }
};
/**
 * @hidden
 */
exports.editorCommands = Object.assign({}, inlineCommand, blockCommand);
