"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var prosemirror_commands_1 = require("prosemirror-commands");
var prosemirror_schema_list_1 = require("prosemirror-schema-list");
var prosemirror_history_1 = require("prosemirror-history");
var prosemirror_inputrules_1 = require("prosemirror-inputrules");
var mac = typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false;
// https://github.com/ProseMirror/prosemirror-example-setup/blob/master/src/keymap.js
/**
 * @hidden
 */
function buildKeymap(schema, mapKeys) {
    var keys = {};
    function bind(key, cmd) {
        if (mapKeys) {
            var mapped = mapKeys[key];
            if (mapped === false) {
                return;
            }
            if (mapped) {
                key = mapped;
            }
        }
        keys[key] = cmd;
    }
    bind('Mod-z', prosemirror_history_1.undo);
    bind('Shift-Mod-z', prosemirror_history_1.redo);
    bind('Backspace', prosemirror_inputrules_1.undoInputRule);
    if (!mac) {
        bind('Mod-y', prosemirror_history_1.redo);
    }
    if (schema.marks.strong) {
        bind('Mod-b', prosemirror_commands_1.toggleMark(schema.marks.strong));
    }
    if (schema.marks.em) {
        bind('Mod-i', prosemirror_commands_1.toggleMark(schema.marks.em));
    }
    if (schema.marks.underline) {
        bind('Mod-u', prosemirror_commands_1.toggleMark(schema.marks.underline));
    }
    if (schema.nodes.hardBreak) {
        var br_1 = schema.nodes.hardBreak, cmd = prosemirror_commands_1.chainCommands(prosemirror_commands_1.exitCode, function (state, dispatch) {
            dispatch(state.tr.replaceSelectionWith(br_1.create()).scrollIntoView());
            return true;
        });
        bind('Mod-Enter', cmd);
        bind('Shift-Enter', cmd);
        if (mac) {
            bind('Ctrl-Enter', cmd);
        }
    }
    if (schema.nodes.listItem) {
        bind('Enter', prosemirror_schema_list_1.splitListItem(schema.nodes.listItem));
    }
    return keys;
}
exports.buildKeymap = buildKeymap;
