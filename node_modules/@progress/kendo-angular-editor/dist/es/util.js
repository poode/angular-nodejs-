/**
 * @hidden
 */
export function outerWidth(element) {
    var width = element.offsetWidth;
    var style = getComputedStyle(element);
    width += (parseFloat(style.marginLeft) || 0 + parseFloat(style.marginRight) || 0);
    return width;
}
/**
 * @hidden
 */
export var serializeDOMAttrs = function (el) {
    return Array.from(el.attributes)
        .reduce(function (acc, curr) {
        return Object.assign({}, acc, (_a = {}, _a[curr.name] = curr.value, _a));
        var _a;
    }, {});
};
/**
 * @hidden
 */
export var removeEntries = function (obj, predicate) {
    return Object.keys(obj)
        .filter(function (key) { return predicate(key); })
        .reduce(function (acc, curr) {
        return Object.assign(acc, (_a = {}, _a[curr] = obj[curr], _a));
        var _a;
    }, {});
};
/**
 * @hidden
 */
export var removeEmptyEntries = function (obj) {
    var predicate = function (key) { return obj[key] !== null && obj[key] !== undefined && obj[key] !== ''; };
    return removeEntries(obj, predicate);
};
/**
 * @hidden
 */
export var isEmpty = function (obj) { return Object.keys(obj).length === 0; };
/**
 * @hidden
 */
export var isNullOrUndefined = function (value) { return value === undefined || value === null; };
/**
 * @hidden
 */
export var safeString = function (value) { return isNullOrUndefined(value) ? '' : value.toString(); };
/**
 * @hidden
 */
export var first = function (arr) { return arr[0]; };
/**
 * @hidden
 */
export var last = function (arr) { return arr[arr.length - 1]; };
/**
 * @hidden
 */
export var unique = function (arr) { return Array.from(new Set(arr)); };
