import { Directive, Input, Host } from '@angular/core';
import { ToolBarDropDownListComponent } from '../tools/toolbar-dropdownlist.component';
import { EditorComponent } from '../editor.component';
/**
 * A directive which configures an existing `ToolBarDropDownComponent` as an Editor format tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)). `kendoEditorDropDown` predefines
 * the `defaultItem`, `data`, and `valueChange` event handlers. In addition,
 * the directive updates the selected item while the user is editing.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-dropdownlist kendoEditorDropDown="format"></kendo-toolbar-dropdownlist>
 * ```
 */
var EditorDropDownDirective = /** @class */ (function () {
    function EditorDropDownDirective(dropdownlist, editor) {
        this.dropdownlist = dropdownlist;
        this.editor = editor;
        /**
         * Defines the built-in drop-down list that will be opened. Can be of the `DialogCommand` type.
         * The supported value is `format`.
         */
        this.command = 'format'; // tslint:disable-line:no-input-rename
    }
    EditorDropDownDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.dropdownlist.textField = 'text';
        this.dropdownlist.valueField = 'tag';
        this.dropdownlist.valuePrimitive = true;
        this.dropdownlist.itemDisabled = function (itemArgs) {
            return itemArgs.dataItem.tag === '';
        };
        this.dropdownlist.data = [
            { text: 'Paragraph', tag: 'p' },
            { text: 'Quotation', tag: 'blockquote' },
            { text: 'Heading 1', tag: 'h1' },
            { text: 'Heading 2', tag: 'h2' },
            { text: 'Heading 3', tag: 'h3' },
            { text: 'Heading 4', tag: 'h4' },
            { text: 'Heading 5', tag: 'h5' },
            { text: 'Heading 6', tag: 'h6' }
        ];
        //TODO: style headings via template
        this.dropdownlist.defaultItem = { text: 'Format', tag: '' };
        this.dropdownlist.valueChange.subscribe(function (value) {
            _this.editor.exec('format', { tag: value });
            _this.editor.focus();
        });
        this.editor.stateChange.subscribe(function (_a) {
            var format = _a.format;
            var index = _this.dropdownlist.data.findIndex(function (item) { return item.tag === format.tag; });
            _this.dropdownlist.value = (index !== -1) ? format.tag : '';
        });
    };
    EditorDropDownDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'kendo-toolbar-dropdownlist[kendoEditorDropDown]'
                },] },
    ];
    /** @nocollapse */
    EditorDropDownDirective.ctorParameters = function () { return [
        { type: ToolBarDropDownListComponent, },
        { type: EditorComponent, decorators: [{ type: Host },] },
    ]; };
    EditorDropDownDirective.propDecorators = {
        'command': [{ type: Input, args: ['kendoEditorDropDown',] },],
    };
    return EditorDropDownDirective;
}());
export { EditorDropDownDirective };
