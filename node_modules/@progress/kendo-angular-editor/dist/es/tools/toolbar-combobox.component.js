import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, forwardRef, Output, EventEmitter } from '@angular/core';
import { ToolBarToolComponent } from '@progress/kendo-angular-toolbar';
import { outerWidth } from '../util';
/**
 * @hidden
 */
var ToolBarComboBoxComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ToolBarComboBoxComponent, _super);
    function ToolBarComboBoxComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.valueChange = new EventEmitter();
        return _this;
    }
    Object.defineProperty(ToolBarComboBoxComponent.prototype, "outerWidth", {
        get: function () {
            if (this.element) {
                return outerWidth(this.element.nativeElement);
            }
        },
        enumerable: true,
        configurable: true
    });
    ToolBarComboBoxComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:no-forward-ref
                    providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(function () { return ToolBarComboBoxComponent; }) }],
                    selector: 'kendo-toolbar-combobox',
                    template: "\n        <ng-template #toolbarTemplate>\n            <kendo-combobox #element\n                [placeholder]=\"placeholder\"\n                [textField]=\"textField\"\n                [valueField]=\"valueField\"\n                [data]=\"data\"\n                [value]=\"value\"\n                (valueChange)=\"valueChange.emit($event)\"\n            >\n            </kendo-combobox>\n        </ng-template>\n    "
                },] },
    ];
    /** @nocollapse */
    ToolBarComboBoxComponent.ctorParameters = function () { return []; };
    ToolBarComboBoxComponent.propDecorators = {
        'textField': [{ type: Input },],
        'valueField': [{ type: Input },],
        'data': [{ type: Input },],
        'value': [{ type: Input },],
        'placeholder': [{ type: Input },],
        'valueChange': [{ type: Output },],
        'toolbarTemplate': [{ type: ViewChild, args: ['toolbarTemplate',] },],
        'element': [{ type: ViewChild, args: ['element',] },],
    };
    return ToolBarComboBoxComponent;
}(ToolBarToolComponent));
export { ToolBarComboBoxComponent };
