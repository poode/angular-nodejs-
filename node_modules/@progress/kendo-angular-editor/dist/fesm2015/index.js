import { Component, ContentChild, Directive, ElementRef, EventEmitter, Host, HostBinding, Input, NgModule, Output, ViewChild, ViewContainerRef, forwardRef } from '@angular/core';
import { FormControl, FormGroup, FormsModule, NG_VALUE_ACCESSOR, ReactiveFormsModule, Validators } from '@angular/forms';
import { fromEvent as fromEvent$1 } from 'rxjs/observable/fromEvent';
import { map as map$1 } from 'rxjs/operators/map';
import { filter as filter$1 } from 'rxjs/operators/filter';
import { ToolBarButtonComponent, ToolBarComponent, ToolBarModule, ToolBarToolComponent } from '@progress/kendo-angular-toolbar';
import { DialogContentBase, DialogModule, DialogRef, DialogService } from '@progress/kendo-angular-dialog';
import { EditorView } from 'prosemirror-view';
import { autoJoin, baseKeymap, chainCommands, exitCode, setBlockType, toggleMark } from 'prosemirror-commands';
import { AllSelection, EditorState, NodeSelection, TextSelection } from 'prosemirror-state';
import { keymap } from 'prosemirror-keymap';
import { history, redo, undo } from 'prosemirror-history';
import { DOMParser, DOMSerializer, Fragment, Node, NodeRange, Schema, Slice } from 'prosemirror-model';
import { liftListItem, sinkListItem, splitListItem, wrapInList } from 'prosemirror-schema-list';
import { undoInputRule } from 'prosemirror-inputrules';
import { ReplaceAroundStep, liftTarget } from 'prosemirror-transform';
import { CommonModule } from '@angular/common';
import { DropDownsModule } from '@progress/kendo-angular-dropdowns';
import { ButtonModule } from '@progress/kendo-angular-buttons';

/**
 * @hidden
 */
function outerWidth(element) {
    let width = element.offsetWidth;
    const style = getComputedStyle(element);
    width += (parseFloat(style.marginLeft) || 0 + parseFloat(style.marginRight) || 0);
    return width;
}
/**
 * @hidden
 */
const serializeDOMAttrs = (el) => Array.from(el.attributes)
    .reduce((acc, curr) => Object.assign({}, acc, { [curr.name]: curr.value }), {});
/**
 * @hidden
 */
const removeEntries = (obj, predicate) => Object.keys(obj)
    .filter(key => predicate(key))
    .reduce((acc, curr) => Object.assign(acc, { [curr]: obj[curr] }), {});
/**
 * @hidden
 */
const removeEmptyEntries = (obj) => {
    const predicate = (key) => obj[key] !== null && obj[key] !== undefined && obj[key] !== '';
    return removeEntries(obj, predicate);
};
/**
 * @hidden
 */
const isEmpty = (obj) => Object.keys(obj).length === 0;
/**
 * @hidden
 */
const isNullOrUndefined = (value) => value === undefined || value === null;
/**
 * @hidden
 */
const safeString = (value) => isNullOrUndefined(value) ? '' : value.toString();
/**
 * @hidden
 */
const first = (arr) => arr[0];
/**
 * @hidden
 */
const last = (arr) => arr[arr.length - 1];
/**
 * @hidden
 */
const unique = (arr) => Array.from(new Set(arr));

const SLOT = 0; //https://prosemirror.net/docs/guide/#schema.serialization_and_parsing
const commonAttributes = () => {
    return {
        style: { default: null },
        class: { default: null },
        id: { default: null }
    };
};
/**
 * @hidden
 */
const marks = {
    // TODO: Add target.
    // :: MarkSpec A link. Has `href` and `title` attributes. `title`
    // defaults to an empty string. Rendered and parsed as an `<a>`
    // element.
    link: {
        attrs: {
            href: { default: '' },
            title: { default: null }
        },
        inclusive: false,
        parseDOM: [{
                tag: 'a[href]',
                getAttrs: (dom) => ({
                    href: dom.getAttribute('href'),
                    title: dom.getAttribute('title')
                })
            }],
        toDOM: (mark) => [
            'a',
            // Add default value for href. Otherwise the link is not rendered properly(blue with underline)
            Object.assign({}, { href: '' }, removeEmptyEntries(mark.attrs)),
            SLOT
        ]
    },
    // :: MarkSpec An emphasis mark. Rendered as an `<em>` element.
    // Has parse rules that also match `<i>` and `font-style: italic`.
    em: {
        parseDOM: [
            { tag: 'i' },
            { tag: 'em' },
            { style: 'font-style=italic' }
        ],
        toDOM: () => ['em', SLOT]
    },
    // :: MarkSpec A strong mark. Rendered as `<strong>`, parse rules
    // also match `<b>` and `font-weight: bold`.
    strong: {
        parseDOM: [
            { tag: 'strong' },
            // This works around a Google Docs misbehavior where
            // pasted content will be inexplicably wrapped in `<b>`
            // tags with a font-weight normal `{tag: 'b', getAttrs: node => node.style.fontWeight != 'normal' && null}`,
            {
                style: 'font-weight',
                // According to the docs, the value can be a DOM element (for tag rules) or a string (for style rules).
                getAttrs: (value) => /^(bold(er)?|[5-9]\d{2,})$/.test(value) && null
            }
        ],
        toDOM: () => ['strong', SLOT]
    },
    // :: MarkSpec Code font mark. Represented as a `<code>` element.
    code: {
        parseDOM: [{ tag: 'code' }],
        toDOM: () => ['code', SLOT]
    },
    // :: MarkSpec An underline mark. Rendered as a `<u>` element.
    // Parse rules also match `text-decoration: underline`.
    underline: {
        parseDOM: [
            { tag: 'u' },
            { style: 'text-decoration=underline' }
        ],
        toDOM: () => ['u', SLOT]
    },
    // :: MarkSpec A strikethrough mark. Rendered as a `<del>` element.
    // Parse rules also match `<s>`, `<strike>`, `text-decoration: line-through`.
    strikethrough: {
        parseDOM: [
            { tag: 'del' },
            { tag: 's' },
            { tag: 'strike' },
            { style: 'text-decoration=line-through' }
        ],
        toDOM: () => ['del', SLOT]
    },
    // :: MarkSpec A subscript mark. Rendered as a `<sub>` element.
    // Parse rules also match `vertical-align: sub`.
    subscript: {
        parseDOM: [
            { tag: 'sub' },
            { style: 'vertical-align=sub' }
        ],
        toDOM: () => ['sub', SLOT]
    },
    // :: MarkSpec A superscript mark. Rendered as a `<sup>` element.
    // Parse rules also match `vertical-align: super`.
    superscript: {
        parseDOM: [
            { tag: 'sup' },
            { style: 'vertical-align=super' }
        ],
        toDOM: () => ['sup', SLOT]
    }
};
/**
 * @hidden
 */
const nodes = {
    // :: NodeSpec The top level document node.
    doc: {
        content: 'block+'
    },
    // :: NodeSpec A plain textblock paragraph. Represented
    // as a `<p>` element in the DOM.
    paragraph: {
        content: 'inline*',
        group: 'block',
        attrs: Object.assign({}, commonAttributes()),
        parseDOM: [{
                tag: 'p',
                getAttrs: serializeDOMAttrs
            }],
        toDOM: (node) => isEmpty(node.attrs) ? ['p', SLOT] : ['p', removeEmptyEntries(node.attrs), SLOT]
    },
    // :: NodeSpec A blockquote (`<blockquote>`) which wraps one or more blocks.
    blockquote: {
        content: 'inline*',
        group: 'block',
        attrs: Object.assign({}, commonAttributes()),
        defining: true,
        parseDOM: [{ tag: 'blockquote' }],
        toDOM: (node) => ['blockquote', removeEmptyEntries(node.attrs), SLOT]
    },
    // :: NodeSpec A horizontal (`<hr>`) rule.
    horizontalRule: {
        group: 'block',
        parseDOM: [{ tag: 'hr' }],
        toDOM: () => ['hr']
    },
    // :: NodeSpec A heading textblock with a `level` attribute that
    // has to hold a number from 1 to 6. Parsed and serialized as an `<h1>` to
    // an `<h6>` element.
    heading: {
        attrs: Object.assign({ level: { default: 1 } }, commonAttributes()),
        content: 'inline*',
        group: 'block',
        defining: true,
        parseDOM: [
            { tag: 'h1', attrs: { level: 1 } },
            { tag: 'h2', attrs: { level: 2 } },
            { tag: 'h3', attrs: { level: 3 } },
            { tag: 'h4', attrs: { level: 4 } },
            { tag: 'h5', attrs: { level: 5 } },
            { tag: 'h6', attrs: { level: 6 } }
        ],
        toDOM: (node) => {
            const attrs = removeEntries(node.attrs, (key) => key !== 'level');
            return ['h' + node.attrs.level, removeEmptyEntries(attrs), SLOT];
        }
    },
    // :: NodeSpec A code listing. Prevents marks or non-text inline
    // nodes by default. Represented as a `<pre>` element with a
    // `<code>` element inside.
    codeBlock: {
        content: 'text*',
        marks: '',
        group: 'block',
        code: true,
        defining: true,
        parseDOM: [{
                tag: 'pre',
                preserveWhitespace: 'full'
            }],
        toDOM: () => ['pre', ['code', SLOT]]
    },
    // :: NodeSpec The text node.
    text: {
        group: 'inline'
    },
    // :: NodeSpec An inline image (`<img>`) node. Supports `src`,
    // `alt`, and `href` attributes. The last two default to an empty
    // string.
    image: {
        inline: true,
        attrs: Object.assign({}, commonAttributes(), { src: {}, alt: { default: null }, width: { default: null }, height: { default: null } }),
        group: 'inline',
        draggable: true,
        parseDOM: [{
                tag: 'img[src]',
                getAttrs: (dom) => ({
                    src: dom.getAttribute('src'),
                    alt: dom.getAttribute('alt'),
                    width: dom.getAttribute('width'),
                    height: dom.getAttribute('height')
                })
            }],
        toDOM: (node) => ['img', removeEmptyEntries(node.attrs)]
    },
    // :: NodeSpec A hard line break. Represented as a `<br>` element in the DOM.
    hardBreak: {
        inline: true,
        group: 'inline',
        selectable: false,
        parseDOM: [{ tag: 'br' }],
        toDOM: () => ['br']
    },
    // :: NodeSpec A list item. Represented as a `<li>` element.
    listItem: {
        attrs: Object.assign({}, commonAttributes()),
        content: 'paragraph block*',
        marks: '_',
        parseDOM: [{ tag: 'li' }],
        toDOM: (node) => ['li', removeEmptyEntries(node.attrs), SLOT]
    },
    // :: NodeSpec An ordered list. Represented as an `<ol>` element.
    // Has a single `order` attribute which determines the number at which
    // the list starts counting. Defaults to 1.
    orderedList: {
        attrs: {
            order: {
                default: 1
            }
        },
        content: 'listItem+',
        group: 'block',
        parseDOM: [{
                tag: 'ol',
                getAttrs: (dom) => ({
                    order: dom.hasAttribute('start') ? parseInt(dom.getAttribute('start'), 10) : 1
                })
            }],
        toDOM: node => (node.attrs.order === 1 ? ['ol', SLOT] : ['ol', { start: node.attrs.order }, SLOT])
    },
    // :: NodeSec An unordered list. Represented as a `<ul>` element.
    bulletList: {
        content: 'listItem+',
        group: 'block',
        parseDOM: [{ tag: 'ul' }],
        toDOM: () => ['ul', SLOT]
    }
};
/**
 * @hidden
 */
const schema = new Schema({
    nodes,
    marks
});

const mac = typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false;
// https://github.com/ProseMirror/prosemirror-example-setup/blob/master/src/keymap.js
/**
 * @hidden
 */
function buildKeymap(schema, mapKeys) {
    let keys = {};
    function bind(key, cmd) {
        if (mapKeys) {
            let mapped = mapKeys[key];
            if (mapped === false) {
                return;
            }
            if (mapped) {
                key = mapped;
            }
        }
        keys[key] = cmd;
    }
    bind('Mod-z', undo);
    bind('Shift-Mod-z', redo);
    bind('Backspace', undoInputRule);
    if (!mac) {
        bind('Mod-y', redo);
    }
    if (schema.marks.strong) {
        bind('Mod-b', toggleMark(schema.marks.strong));
    }
    if (schema.marks.em) {
        bind('Mod-i', toggleMark(schema.marks.em));
    }
    if (schema.marks.underline) {
        bind('Mod-u', toggleMark(schema.marks.underline));
    }
    if (schema.nodes.hardBreak) {
        let br = schema.nodes.hardBreak, cmd = chainCommands(exitCode, (state, dispatch) => {
            dispatch(state.tr.replaceSelectionWith(br.create()).scrollIntoView());
            return true;
        });
        bind('Mod-Enter', cmd);
        bind('Shift-Enter', cmd);
        if (mac) {
            bind('Ctrl-Enter', cmd);
        }
    }
    if (schema.nodes.listItem) {
        bind('Enter', splitListItem(schema.nodes.listItem));
    }
    return keys;
}

const style = (name, value) => {
    return { name: name, value: value };
};
/**
 * @hidden
 */
const alignLeftRules = [
    { node: 'paragraph', style: [style('text-align', 'left')] },
    { node: 'heading', style: [style('text-align', 'left')] },
    { node: 'listItem', style: [style('text-align', 'left'), style('list-style-position', 'inside')] }
];
/**
 * @hidden
 */
const alignRightRules = [
    { node: 'paragraph', style: [style('text-align', 'right')] },
    { node: 'heading', style: [style('text-align', 'right')] },
    { node: 'listItem', style: [style('text-align', 'right'), style('list-style-position', 'inside')] }
];
/**
 * @hidden
 */
const alignCenterRules = [
    { node: 'paragraph', style: [style('text-align', 'center')] },
    { node: 'heading', style: [style('text-align', 'center')] },
    { node: 'listItem', style: [style('text-align', 'center'), style('list-style-position', 'inside')] }
];
/**
 * @hidden
 */
const alignRemoveRules = [
    { node: 'paragraph', style: [style('text-align', '')] },
    { node: 'heading', style: [style('text-align', '')] },
    { node: 'listItem', style: [style('text-align', ''), style('list-style-position', '')] }
];

const { blockquote, bulletList, doc, heading, listItem, orderedList, paragraph, image } = schema.nodes;
const getTypeName = (n) => {
    return n instanceof Node ? n.type.name : n.name;
};
const isListType = (node) => {
    const nodeName = typeof node === 'string' ? node : getTypeName(node);
    return nodeName === getTypeName(orderedList) || nodeName === getTypeName(bulletList);
};
const getListTypeFromPos = (pos) => Array.from(new Array(pos.depth), (_, index) => pos.depth - index)
    .map((depth) => pos.node(depth))
    .map(getTypeName)
    .find(isListType);
/**
 * @hidden
 */
function isMarkActive(state, markType) {
    const { from, $from, to, empty } = state.selection;
    if (empty) {
        return !!markType.isInSet(state.storedMarks || $from.marks());
    }
    else {
        return !!state.doc.rangeHasMark(from, to, markType);
    }
}
/**
 * @hidden
 */
function isNodeActive(state, nodeType, attrs) {
    const parent = findParentNode((node) => getTypeName(node) === getTypeName(nodeType))(state.selection);
    if (!parent || (attrs && !Object.keys(attrs).length)) {
        return !!parent;
    }
    return parent.node.hasMarkup(nodeType, attrs);
}
/**
 * @hidden
 */
const isInListOfType = ({ selection }, nodeType) => {
    const { $anchor, $head } = selection;
    let topNodes = [];
    const anchorParentName = getListTypeFromPos($anchor);
    const headParentName = getListTypeFromPos($head);
    selection.content().content.descendants((n) => {
        topNodes = [...topNodes, n];
        return false;
    });
    const nonListTopNodes = topNodes.filter((n) => {
        return (getTypeName(n) !== getTypeName(bulletList)) && (getTypeName(n) !== getTypeName(orderedList));
    });
    // no selection
    if (selection instanceof TextSelection && selection.$cursor) {
        return getListTypeFromPos(selection.$cursor) === nodeType.name;
    }
    const hasSingleUniqueTopNode = unique(topNodes.map(getTypeName)).length === 1;
    // with selection
    if (nonListTopNodes.length > 0 || !hasSingleUniqueTopNode) {
        return false;
    }
    // from this point on we have guaranteed that the top nodes are all of the same LIST type
    // same top list node
    const node = first(topNodes);
    let listChildNodes = [getTypeName(node)];
    node.descendants((childNode) => {
        if (isListType(childNode)) {
            listChildNodes = [...listChildNodes, getTypeName(childNode)];
        }
    });
    if (last(listChildNodes) !== nodeType.name) {
        return false;
    }
    return anchorParentName === headParentName && anchorParentName === nodeType.name;
};
/**
 * @hidden
 */
function activeNodeName(state) {
    let node;
    if (state.selection instanceof AllSelection) {
        node = state.doc;
    }
    else {
        const { $anchor } = state.selection;
        const blockNode = $anchor.node($anchor.blockRange().depth);
        const isDoc = getTypeName(blockNode) === getTypeName(doc);
        node = isDoc ? $anchor.node() : blockNode;
    }
    return {
        name: getTypeName(node),
        tag: getNodeTag(node)
    };
}
/**
 * @hidden
 */
function getNodeTag(node) {
    const parseRules = node.type.spec.parseDOM;
    const nodeAttrs = node.attrs;
    let parseRule;
    if (parseRules && parseRules.length) {
        if (parseRules.length === 1) {
            parseRule = parseRules[0];
        }
        else {
            parseRule = parseRules.find((rule) => {
                //TODO: refactor this
                return JSON.stringify(rule.attrs) === JSON.stringify(nodeAttrs);
            });
        }
    }
    if (parseRule) {
        return parseRule.tag;
    }
}
/**
 * @hidden
 */
function canIndent(state, nodeType) {
    return isNodeActive(state, nodeType) && sinkListItem(nodeType)(state);
}
/**
 * @hidden
 */
function canOutdent(state, nodeType) {
    const isNestedInOL = !!findNthParentNodeOfType(orderedList, 2)(state.selection);
    const isNestedInUL = !!findNthParentNodeOfType(bulletList, 2)(state.selection);
    return isNodeActive(state, nodeType) && (isNestedInOL || isNestedInUL) && liftListItem(nodeType)(state);
}
/**
 * @hidden
 */
function findParentNode(predicate) {
    return function (selection) {
        const { $from } = selection;
        for (let i = $from.depth; i > 0; i--) {
            const node = $from.node(i);
            if (predicate(node)) {
                return { depth: i, node };
            }
        }
    };
}
/**
 * @hidden
 */
function findNthParentNode(predicate, depth = 1) {
    return function (selection) {
        const { $from } = selection;
        for (let i = $from.depth; i > 0; i--) {
            const node = $from.node(i);
            if (predicate(node)) {
                depth = depth - 1;
                if (depth === 0) {
                    return { depth: i, node };
                }
            }
        }
    };
}
/**
 * @hidden
 */
function findNthParentNodeOfType(nodeType, depth = 1) {
    return function (selection) {
        return findNthParentNode((node) => getTypeName(node) === getTypeName(nodeType), depth)(selection);
    };
}
/**
 * @hidden
 */
const getMark = (state, markType) => {
    let { from, $from, to, empty } = state.selection;
    const stateDoc = state.doc;
    let mark;
    if (empty) {
        mark = markType.isInSet(state.storedMarks || $from.marks());
    }
    else {
        stateDoc.nodesBetween(from, to, node => {
            if (node.isInline && !mark) {
                mark = markType.isInSet(node.marks);
            }
        });
    }
    return mark;
};
/**
 * @hidden
 */
const getNodeFromSelection = (state) => {
    if (state.selection instanceof NodeSelection) {
        return state.selection.node;
    }
};
/**
 * @hidden
 */
function getMarkRange($cursor, markType) {
    const parentNode = $cursor.parent;
    const cursorNodeIndex = $cursor.index();
    const mark = parentNode.child(cursorNodeIndex).marks.find(m => m.type === markType);
    const childCount = parentNode.childCount;
    let start = $cursor.pos - $cursor.textOffset, end = parentNode.child(cursorNodeIndex).nodeSize, index, nodeSize;
    index = cursorNodeIndex - 1;
    while (index >= 0 && mark.isInSet(parentNode.child(index).marks)) {
        nodeSize = parentNode.child(index).nodeSize;
        end += nodeSize;
        start -= nodeSize;
        index -= 1;
    }
    index = cursorNodeIndex + 1;
    while (index < childCount && mark.isInSet(parentNode.child(index).marks)) {
        end += parentNode.child(index).nodeSize;
        index += 1;
    }
    return { from: start, to: start + end };
}
/**
 * @hidden
 */
const removeMark = (markType) => (state, dispatch) => {
    const { from, to, $cursor } = state.selection;
    if ($cursor) {
        let resolvedRange = getMarkRange($cursor, markType);
        dispatch(state.tr.removeMark(resolvedRange.from, resolvedRange.to, markType));
    }
    else {
        dispatch(state.tr.removeMark(from, to, markType));
    }
};
/**
 * @hidden
 */
const modifyMark = (markType, attrs) => (state, dispatch) => {
    const tr = state.tr;
    const { $cursor, from, to } = state.selection;
    if (!$cursor) {
        tr.doc.nodesBetween(from, to, (node, pos) => {
            if (node.isInline && markType.isInSet(node.marks)) {
                tr.removeMark(pos, pos + node.nodeSize, markType);
                tr.addMark(pos, pos + node.nodeSize, markType.create(attrs));
                dispatch(tr);
            }
        });
    }
    else {
        const parentNode = $cursor.parent;
        const cursorNodeIndex = $cursor.index();
        const mark = parentNode.child(cursorNodeIndex).marks.find(m => m.type === markType);
        const childCount = parentNode.childCount;
        let markStart = $cursor.pos - $cursor.textOffset, markSize = parentNode.child(cursorNodeIndex).nodeSize, index, nodeSize;
        index = cursorNodeIndex - 1;
        while (index >= 0 && mark.isInSet(parentNode.child(index).marks)) {
            nodeSize = parentNode.child(index).nodeSize;
            markSize += nodeSize;
            markStart -= nodeSize;
            index -= 1;
        }
        index = cursorNodeIndex + 1;
        while (index < childCount && mark.isInSet(parentNode.child(index).marks)) {
            markSize += parentNode.child(index).nodeSize;
            index += 1;
        }
        tr.removeMark(markStart, markStart + markSize, markType);
        tr.addMark(markStart, markStart + markSize, markType.create(attrs));
        dispatch(tr);
    }
};
/**
 * @hidden
 */
const toggleBold = toggleMark(schema.marks.strong);
/**
 * @hidden
 */
const toggleItalic = toggleMark(schema.marks.em);
/**
 * @hidden
 */
const toggleUnderline = toggleMark(schema.marks.underline);
/**
 * @hidden
 */
const toggleStrikethrough = toggleMark(schema.marks.strikethrough);
/**
 * @hidden
 */
const toggleSubscript = toggleMark(schema.marks.subscript);
/**
 * @hidden
 */
const toggleSuperscript = toggleMark(schema.marks.superscript);
/**
 * @hidden
 */
const createLink = (linkAttrs) => (state, dispatch) => {
    if (isMarkActive(state, schema.marks.link)) {
        modifyMark(schema.marks.link, linkAttrs)(state, dispatch);
    }
    else {
        toggleMark(schema.marks.link, linkAttrs)(state, dispatch);
    }
};
/**
 * @hidden
 */
const applyHeading = (level) => setBlockType(heading, { level });
/**
 * @hidden
 */
const applyParagraph = setBlockType(paragraph);
/**
 * @hidden
 */
const applyBlockquote = setBlockType(blockquote);
/**
 * @hidden
 */
const format = ({ tag }) => {
    if (tag.match(/h\d\b/)) {
        return applyHeading(parseInt(tag[1], 10));
    }
    else if (tag === 'p') {
        return applyParagraph;
    }
    else if (tag === 'blockquote') {
        return applyBlockquote;
    }
};
/**
 * @hidden
 */
const indent = sinkListItem(listItem);
/**
 * @hidden
 */
const outdent = liftListItem(listItem);
/**
 * @hidden
 */
const insertImage = (attrs) => (state, dispatch) => {
    const node = image.createAndFill(attrs);
    dispatch(state.tr.replaceSelectionWith(node));
};
/**
 * @hidden
 */
const getHTML = (state) => {
    const fragment = DOMSerializer
        .fromSchema(state.schema)
        .serializeFragment(state.doc.content);
    const element = document.createElement('div');
    element.appendChild(fragment);
    return element.innerHTML;
};
/**
 * @hidden
 */
const createContentNode = (value) => {
    const element = document.createElement('div');
    // when using ngModel with name attr, content is null and errors, default params dont help
    element.innerHTML = safeString(value).trim();
    return DOMParser.fromSchema(schema).parse(element);
};
/**
 * @hidden
 */
const setHTML = (content) => (state, dispatch) => dispatch(state.tr
    .setSelection(new AllSelection(state.doc))
    .replaceSelectionWith(createContentNode(content)));
/**
 * @hidden
 */
const hasSameMarkup = (dom1, dom2) => {
    const fragment1 = Fragment.from(createContentNode(dom1));
    const fragment2 = Fragment.from(createContentNode(dom2));
    return fragment1.eq(fragment2);
};
/**
 * @hidden
 */
const blockNodes = (state) => {
    const selection = state.selection;
    let { from, to, $from } = selection;
    const result = [];
    if (selection.node) {
        if (selection.node.isBlock) {
            result.push(selection.node);
        }
        else if ($from.parent && $from.parent.isBlock) {
            result.push($from.parent);
        }
    }
    else {
        state.doc.nodesBetween(from, to, node => {
            if (node.isBlock) {
                result.push(node);
            }
        });
    }
    return result;
};
/**
 * @hidden
 */
const changeStyles = (elementStyle, newStyle) => {
    const styleToChange = newStyle.style;
    const regExp = newStyle.value;
    const newValue = newStyle.newValue;
    const styleMatches = [];
    if (elementStyle) {
        const splits = elementStyle.split(/\s*;\s*/).filter(s => s);
        const filtered = splits.filter(s => {
            if (!s.toLowerCase().trim().startsWith(styleToChange)) {
                return true;
            }
            const value = s.split(':')[1].trim();
            if (regExp.test(value)) {
                styleMatches.push(value);
                return false;
            }
            return true;
        });
        if (newValue) {
            filtered.push(`${styleToChange}: ${newValue}`);
        }
        return {
            style: filtered.join('; ') + (filtered.length ? ';' : ''),
            changed: !!newValue || filtered.length !== splits.length,
            styleMatches
        };
    }
    return { changed: false, styleMatches, style: null };
};
/**
 * @hidden
 */
const addStyles = (node, stylesToApply) => {
    let currentStyles = node.attrs.style, changedStyleResult = null, toChange = null;
    if (currentStyles) {
        stylesToApply.forEach(style => {
            toChange = { style: style.name, value: /^.+$/, newValue: style.value };
            changedStyleResult = changeStyles(currentStyles, toChange);
            currentStyles = changedStyleResult.changed ? changedStyleResult.style : currentStyles;
        });
    }
    const reducer = (acc, curr) => (acc && curr.value ? acc + ' ' : '') + curr.value ? `${curr.name}: ${curr.value};` : '';
    currentStyles = currentStyles ||
        stylesToApply.reduce(reducer, '');
    return Object.assign({}, node.attrs, { style: currentStyles || null });
};
/**
 * @hidden
 */
const canChangeType = (stateDoc, pos, type) => {
    let $pos = stateDoc.resolve(pos), index = $pos.index();
    return $pos.parent.canReplaceWith(index, index + 1, type);
};
/**
 * @hidden
 */
const changeBlockNode = (state, dispatch, tr, node, nodeType, attrs) => {
    let { from, to } = state.selection;
    let applicable = false;
    state.doc.nodesBetween(from, to, (currNode, pos) => {
        if (applicable) {
            return false;
        }
        if (!currNode.isTextblock || currNode.hasMarkup(nodeType, attrs)) {
            return;
        }
        if (currNode.type === nodeType) {
            applicable = true;
        }
        else {
            let $pos = state.doc.resolve(pos), index = $pos.index();
            applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType);
        }
    });
    if (!applicable) {
        return false;
    }
    if (dispatch) {
        // const tr = view.state.tr;
        // const tr = view.state.tr.setBlockType(from, to, nodeType, attrs);
        if (!nodeType.isTextblock) {
            throw new RangeError('Type given to setBlockType should be a textblock');
        }
        let mapFrom = tr.steps.length;
        tr.doc.nodesBetween(from, to, (currNode, pos) => {
            if (currNode.eq(node) && currNode.isTextblock && !currNode.hasMarkup(nodeType, attrs) &&
                canChangeType(tr.doc, tr.mapping.slice(mapFrom).map(pos), nodeType)) {
                // Ensure all markup that isn't allowed in the new node type is cleared
                tr.clearIncompatible(tr.mapping.slice(mapFrom).map(pos, 1), nodeType);
                let mapping = tr.mapping.slice(mapFrom);
                let startM = mapping.map(pos, 1), endM = mapping.map(pos + currNode.nodeSize, 1);
                let slice = new Slice(Fragment.from(nodeType.create(attrs, null, currNode.marks)), 0, 0);
                tr.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, slice, 1, true));
                return false; // this will skip the node children
            }
        });
        // view.dispatch(tr.scrollIntoView());
    }
    return true;
};
/**
 * @hidden
 * Aligning block elements in the selection.
 *
 * @returns {boolean} - Returns true if any alignment is applied.
 */
const alignBlocks = (actions) => (state, dispatch) => {
    const blocks = blockNodes(state);
    const tr = state.tr;
    let result = false;
    blocks.forEach(node => {
        if (node.type.isTextblock) {
            let newAttrs = {};
            const action = actions.find(n => n.node === node.type.name);
            if (action) {
                newAttrs = addStyles(node, action.style);
            }
            result = changeBlockNode(state, dispatch, tr, node, node.type, newAttrs) || result;
        }
    });
    if (result) {
        dispatch(tr.scrollIntoView());
    }
    return result;
};
/**
 * @hidden
 * Checks if any block element in the selection is aligned.
 */
const isAligned = (state, actions) => {
    const blocks = blockNodes(state);
    let result = false;
    blocks.forEach(node => {
        if (!result && node.type.isTextblock && node.attrs.style) {
            const action = actions.find(a => a.node === node.type.name);
            if (action) {
                result = action.style.every(style => {
                    return !!style.value && new RegExp(`${style.name}:\\s?${style.value}`, 'i').test(node.attrs.style);
                });
            }
        }
    });
    return result;
};

/**
 * @hidden
 */
const rootListDepth = (pos, nodes) => {
    // Get the depth of the nearest ancestor list
    const { bulletList, orderedList, listItem } = nodes;
    let depth;
    for (let i = pos.depth - 1; i > 0; i--) {
        const node = pos.node(i);
        if (node.type === bulletList || node.type === orderedList) {
            depth = i;
        }
        if (node.type !== bulletList &&
            node.type !== orderedList &&
            node.type !== listItem) {
            break;
        }
    }
    return depth;
};
/**
 * @hidden
 */
const getListLiftTarget = (schema, resPos) => {
    // This will return (depth - 1) for root list parent of a list.
    let target = resPos.depth;
    const { bulletList, orderedList, listItem } = schema.nodes;
    for (let i = resPos.depth; i > 0; i--) {
        const node = resPos.node(i);
        if (node.type === bulletList || node.type === orderedList) {
            target = i;
        }
        if (node.type !== bulletList &&
            node.type !== orderedList &&
            node.type !== listItem) {
            break;
        }
    }
    return target - 1;
};
/**
 * @hidden
 */
function liftSelectionList(state, tr) {
    // The function will list paragraphs in selection out to level 1 below root list.
    const { from, to } = state.selection;
    const { paragraph } = state.schema.nodes;
    const listCol = [];
    tr.doc.nodesBetween(from, to, (node, pos) => {
        if (node.type === paragraph) {
            listCol.push({ node, pos });
        }
    });
    for (let i = listCol.length - 1; i >= 0; i--) {
        const paragr = listCol[i];
        const start = tr.doc.resolve(tr.mapping.map(paragr.pos));
        if (start.depth > 0) {
            let end;
            if (paragr.node.textContent && paragr.node.textContent.length > 0) {
                end = tr.doc.resolve(tr.mapping.map(paragr.pos + paragr.node.textContent.length));
            }
            else {
                end = tr.doc.resolve(tr.mapping.map(paragr.pos + 1));
            }
            const range = start.blockRange(end);
            if (range) {
                tr.lift(range, getListLiftTarget(state.schema, start));
            }
        }
    }
    return tr;
}
/**
 * @hidden
 */
const toggleList = (state, dispatch, view, listType) => {
    const { selection } = state;
    const fromNode = selection.$from.node(selection.$from.depth - 2);
    const endNode = selection.$to.node(selection.$to.depth - 2);
    if (!fromNode ||
        fromNode.type.name !== listType ||
        (!endNode || endNode.type.name !== listType)) {
        return toggleListCommand(listType)(state, dispatch, view);
    }
    else {
        const depth = rootListDepth(selection.$to, state.schema.nodes);
        let tr = liftFollowingList(state, selection.$to.pos, selection.$to.end(depth), depth, state.tr);
        tr = liftSelectionList(state, tr);
        dispatch(tr);
        return true;
    }
};
/**
 * @hidden
 */
function toggleListCommand(listType) {
    return function (state, dispatch, view) {
        if (!view) {
            return false;
        }
        state = view.state;
        const { $from, $to } = state.selection;
        const parent = $from.node(-2);
        const grandgrandParent = $from.node(-3);
        const isRangeOfSingleType = isRangeOfType(state.doc, $from, $to, state.schema.nodes[listType]);
        if (((parent && parent.type === state.schema.nodes[listType]) ||
            (grandgrandParent &&
                grandgrandParent.type === state.schema.nodes[listType])) &&
            isRangeOfSingleType) {
            // Untoggles list
            return liftListItems()(state, dispatch);
        }
        else {
            // Wraps selection in list and converts list type e.g. bullet_list -> ordered_list if needed
            if (!isRangeOfSingleType) {
                liftListItems()(state, dispatch);
                state = view.state;
            }
            return wrapInList$1(state.schema.nodes[listType])(state, dispatch);
        }
    };
}
/**
 * @hidden
 */
function liftListItem$1(state, selection, tr) {
    let { $from, $to } = selection;
    const nodeType = state.schema.nodes.listItem;
    let range = $from.blockRange($to, node => node.childCount && node.firstChild.type === nodeType);
    if (!range ||
        range.depth < 2 ||
        $from.node(range.depth - 1).type !== nodeType) {
        return tr;
    }
    let end = range.end;
    let endOfList = $to.end(range.depth);
    if (end < endOfList) {
        tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList, new Slice(Fragment.from(nodeType.create(undefined, range.parent.copy())), 1, 0), 1, true));
        range = new NodeRange(tr.doc.resolve($from.pos), tr.doc.resolve(endOfList), range.depth);
    }
    return tr.lift(range, liftTarget(range)).scrollIntoView();
}
/**
 * @hidden
 */
function liftFollowingList(state, from, to, rootListDepthNum, tr) {
    // Function will lift list item following selection to level-1.
    const { listItem } = state.schema.nodes;
    let lifted = false;
    tr.doc.nodesBetween(from, to, (node, pos) => {
        if (!lifted && node.type === listItem && pos > from) {
            lifted = true;
            let listDepth = rootListDepthNum + 3;
            while (listDepth > rootListDepthNum + 2) {
                const start = tr.doc.resolve(tr.mapping.map(pos));
                listDepth = start.depth;
                const end = tr.doc.resolve(tr.mapping.map(pos + node.textContent.length));
                const sel = new TextSelection(start, end);
                tr = liftListItem$1(state, sel, tr);
            }
        }
    });
    return tr;
}
/**
 * @hidden
 */
function isRangeOfType(doc, $from, $to, nodeType) {
    // Step through block-nodes between $from and $to and returns false if a node is
    // found that isn't of the specified type
    return (getAncestorNodesBetween(doc, $from, $to).filter((node) => node.type !== nodeType).length === 0);
}
/**
 * @hidden
 */
function getAncestorNodesBetween(doc, $from, $to) {
    // Returns all top-level ancestor-nodes between $from and $to
    const nodes = Array();
    const maxDepth = findAncestorPosition(doc, $from).depth;
    let current = doc.resolve($from.start(maxDepth));
    while (current.pos <= $to.start($to.depth)) {
        const depth = Math.min(current.depth, maxDepth);
        const node = current.node(depth);
        if (node) {
            nodes.push(node);
        }
        if (depth === 0) {
            break;
        }
        let next = doc.resolve(current.after(depth));
        if (next.start(depth) >= doc.nodeSize - 2) {
            break;
        }
        if (next.depth !== current.depth) {
            next = doc.resolve(next.pos + 2);
        }
        if (next.depth) {
            current = doc.resolve(next.start(next.depth));
        }
        else {
            current = doc.resolve(next.end(next.depth));
        }
    }
    return nodes;
}
/**
 * @hidden
 */
function findAncestorPosition(doc, pos) {
    // Traverse the document until an "ancestor" is found. Any nestable block can be an ancestor.
    const nestableBlocks = ['blockquote', 'bulletList', 'orderedList'];
    if (pos.depth === 1) {
        return pos;
    }
    let node = pos.node(pos.depth);
    let newPos = pos;
    while (pos.depth >= 1) {
        pos = doc.resolve(pos.before(pos.depth));
        node = pos.node(pos.depth);
        if (node && nestableBlocks.indexOf(node.type.name) !== -1) {
            newPos = pos;
        }
    }
    return newPos;
}
/**
 * @hidden
 */
function liftListItems() {
    return function (state, dispatch) {
        const { tr } = state;
        const { $from, $to } = state.selection;
        tr.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {
            // Following condition will ensure that block types paragraph, heading, codeBlock, blockquote, panel are lifted.
            // isTextblock is true for paragraph, heading, codeBlock.
            if (node.isTextblock ||
                node.type.name === 'blockquote' ||
                node.type.name === 'panel') {
                const sel = new NodeSelection(tr.doc.resolve(tr.mapping.map(pos)));
                const range = sel.$from.blockRange(sel.$to);
                if (!range || sel.$from.parent.type !== state.schema.nodes.listItem) {
                    return false;
                }
                const target = range && liftTarget(range);
                if (target === undefined || target === null) {
                    return false;
                }
                tr.lift(range, target);
            }
        });
        if (dispatch) {
            dispatch(tr);
        }
        return true;
    };
}
/**
 * @hidden
 */
function wrapInList$1(nodeType) {
    return autoJoin(wrapInList(nodeType), (before, after) => before.type === after.type && before.type === nodeType);
}
/**
 * @hidden
 */
function toggleUnorderedList(state, dispatch, view) {
    return toggleList(state, dispatch, view, 'bulletList');
}
/**
 * @hidden
 */
function toggleOrderedList(state, dispatch, view) {
    return toggleList(state, dispatch, view, 'orderedList');
}

const inlineCommand = {
    bold: () => toggleBold,
    italic: () => toggleItalic,
    createLink: (attr) => createLink(attr),
    unlink: () => removeMark(schema.marks.link),
    underline: () => toggleUnderline,
    strikethrough: () => toggleStrikethrough,
    subscript: () => toggleSubscript,
    superscript: () => toggleSuperscript
};
const blockCommand = {
    format: (formatAttr) => format(formatAttr),
    alignLeft: () => alignBlocks(alignLeftRules),
    alignCenter: () => alignBlocks(alignCenterRules),
    alignRight: () => alignBlocks(alignRightRules),
    alignJustify: () => alignBlocks(alignRemoveRules),
    indent: () => indent,
    outdent: () => outdent,
    // think about changing the command name.
    insertOrderedList: () => toggleOrderedList,
    // think about changing the command name.
    insertUnorderedList: () => toggleUnorderedList,
    getHTML: () => getHTML,
    setHTML: (content) => setHTML(content),
    undo: () => undo,
    redo: () => redo,
    insertImage: (attrs) => insertImage(attrs)
};
/**
 * @hidden
 */
const editorCommands = Object.assign({}, inlineCommand, blockCommand);

/**
 * @hidden
 */
class LinkDialogComponent extends DialogContentBase {
    constructor(dialog) {
        super(dialog);
        this.dialog = dialog;
        this.data = { href: '', title: '', target: undefined };
    }
    onCancelAction() {
        this.dialog.close();
    }
    onConfirmAction() {
        this.editor.exec('createLink', this.getData());
        this.dialog.close();
        this.editor.focus();
    }
    setData(state) {
        const mark = getMark(state, schema.marks.link);
        if (mark) {
            this.data = {
                href: mark.attrs.href,
                title: mark.attrs.title,
                target: mark.attrs.target
            };
        }
    }
    getData() {
        return {
            href: this.href.nativeElement.value || undefined,
            title: this.title.nativeElement.value || undefined,
            target: this.target.nativeElement.checked ? '_blank' : undefined
        };
    }
}
LinkDialogComponent.decorators = [
    { type: Component, args: [{
                template: `
        <kendo-dialog-titlebar>
            Insert Link
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content" >
                <div class="k-edit-form-container k-window-content">
                    <div class="k-edit-label">
                        <label for="k-editor-link-url">Web address</label>
                    </div>
                    <div class="k-edit-field">
                        <input #href [value]="data.href" type="text" class="k-input k-textbox">
                    </div>
                    <div class="k-edit-label k-editor-link-text-row">
                        <label for="k-editor-link-text">Title</label>
                    </div>
                    <div class="k-edit-field k-editor-link-text-row">
                        <input #title [value]="data.title" type="text" class="k-input k-textbox">
                    </div>
                    <div class="k-edit-field">
                        <input #target type="checkbox" class="k-checkbox">
                        <label for="k-editor-link-target" class="k-checkbox-label">Open link in new window</label>
                    </div>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">Cancel</button>
            <button kendoButton (click)="onConfirmAction()" [primary]="true">Insert</button>
        </kendo-dialog-actions>
    `
            },] },
];
/** @nocollapse */
LinkDialogComponent.ctorParameters = () => [
    { type: DialogRef, },
];
LinkDialogComponent.propDecorators = {
    'editor': [{ type: Input },],
    'href': [{ type: ViewChild, args: ['href',] },],
    'title': [{ type: ViewChild, args: ['title',] },],
    'target': [{ type: ViewChild, args: ['target',] },],
};

// import { EditorService } from '../editor.service';
/**
 * @hidden
 */
class SourceDialogComponent extends DialogContentBase {
    constructor(dialog) {
        super(dialog);
        this.dialog = dialog;
        this.data = '';
    }
    onCancelAction() {
        this.dialog.close();
    }
    onConfirmAction() {
        this.editor.exec('setHTML', this.getData());
        this.dialog.close();
        this.editor.focus();
    }
    getData() {
        return this.textarea.nativeElement.value;
    }
    setData() {
        this.data = this.indent(this.editor.getSource());
    }
    indent(content) {
        return content.replace(/<\/(p|li|ul|ol|h[1-6]|table|tr|td|th)>/ig, "</$1>\n")
            .replace(/<(ul|ol)([^>]*)><li/ig, "<$1$2>\n<li")
            .replace(/<br \/>/ig, "<br />\n")
            .replace(/\n$/, "");
    }
}
SourceDialogComponent.decorators = [
    { type: Component, args: [{
                template: `
        <kendo-dialog-titlebar>
            View Source
        </kendo-dialog-titlebar>
        <textarea [value]="data" #textarea class="k-editor-textarea k-input"></textarea>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">Cancel</button>
            <button kendoButton (click)="onConfirmAction()" [primary]="true">Update</button>
        </kendo-dialog-actions>
    `,
                styles: [`
        >>> .k-editor-textarea {
            height: 100%;
        }
    `]
            },] },
];
/** @nocollapse */
SourceDialogComponent.ctorParameters = () => [
    { type: DialogRef, },
];
SourceDialogComponent.propDecorators = {
    'editor': [{ type: Input },],
    'textarea': [{ type: ViewChild, args: ['textarea',] },],
};

/**
 * @hidden
 */
class ImageDialogComponent extends DialogContentBase {
    constructor(dialog) {
        super(dialog);
        this.dialog = dialog;
        this.data = {
            src: '',
            alt: '',
            width: '',
            height: ''
        };
        this.src = new FormControl('', Validators.required);
        this.alt = new FormControl('');
        this.width = new FormControl('', Validators.min(1));
        this.height = new FormControl('', Validators.min(1));
        this.imageData = new FormGroup({
            src: this.src,
            alt: this.alt,
            width: this.width,
            height: this.height
        });
    }
    onCancelAction() {
        this.dialog.close();
    }
    onConfirmAction() {
        if (this.src.value) {
            this.editor.exec('insertImage', this.getData());
            this.dialog.close();
            this.editor.focus();
        }
    }
    setData(state) {
        const node = getNodeFromSelection(state);
        if (node) {
            this.src.patchValue(node.attrs.src);
            this.alt.patchValue(node.attrs.alt);
            this.width.patchValue(node.attrs.width);
            this.height.patchValue(node.attrs.height);
        }
    }
    getData() {
        return {
            src: this.src.value,
            alt: this.alt.value,
            width: this.normalizeDimension(this.width.value),
            height: this.normalizeDimension(this.height.value)
        };
    }
    normalizeDimension(value) {
        return Number.isNaN(parseInt(value, 10)) || parseInt(value, 10) <= 0 ? '' : safeString(parseInt(value, 10));
    }
}
ImageDialogComponent.decorators = [
    { type: Component, args: [{
                template: `
        <kendo-dialog-titlebar>
            Insert Image
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content" >
                <div class="k-edit-form-container k-window-content">
                    <div class="k-edit-label">
                        <label for="k-editor-image-url">Web address</label>
                    </div>
                    <div class="k-edit-field">
                        <input [formControl]="src" type="text" class="k-input k-textbox">
                    </div>
                    <div class="k-edit-label">
                        <label for="k-editor-image-text">Alternate text</label>
                    </div>
                    <div class="k-edit-field">
                        <input [formControl]="alt" type="text" class="k-input k-textbox">
                    </div>
                    <div class="k-edit-label">
                        <label for="k-editor-image-width">Width (px)</label>
                    </div>
                    <div class="k-edit-field">
                        <input [formControl]="width" type="text" class="k-input k-textbox">
                    </div>
                    <div class="k-edit-label">
                        <label for="k-editor-image-height">Height (px)</label>
                    </div>
                    <div class="k-edit-field">
                        <input [formControl]="height" type="text" class="k-input k-textbox">
                    </div>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">Cancel</button>
            <button kendoButton [disabled]="imageData.invalid" (click)="onConfirmAction()" [primary]="true">Insert</button>
        </kendo-dialog-actions>
    `
            },] },
];
/** @nocollapse */
ImageDialogComponent.ctorParameters = () => [
    { type: DialogRef, },
];
ImageDialogComponent.propDecorators = {
    'editor': [{ type: Input },],
};

function updateToolBar({ state }) {
    return {
        //marks
        bold: isMarkActive(state, schema.marks.strong),
        italic: isMarkActive(state, schema.marks.em),
        underline: isMarkActive(state, schema.marks.underline),
        strikethrough: isMarkActive(state, schema.marks.strikethrough),
        link: isMarkActive(state, schema.marks.link),
        subscript: isMarkActive(state, schema.marks.subscript),
        superscript: isMarkActive(state, schema.marks.superscript),
        //nodes
        format: activeNodeName(state),
        insertOrderedList: isInListOfType(state, schema.nodes.orderedList),
        insertUnorderedList: isInListOfType(state, schema.nodes.bulletList),
        indent: canIndent(state, schema.nodes.listItem),
        outdent: canOutdent(state, schema.nodes.listItem),
        alignLeft: isAligned(state, alignLeftRules),
        alignCenter: isAligned(state, alignCenterRules),
        alignRight: isAligned(state, alignRightRules),
        alignJustify: isAligned(state, alignRemoveRules),
        //history
        undo: !undo(state),
        redo: !redo(state),
        //selection
        noSelection: state.selection.empty
    };
}
const editorDialogs = {
    createLink: {
        content: LinkDialogComponent
    },
    viewSource: {
        content: SourceDialogComponent,
        width: 500,
        height: 400
    },
    insertImage: {
        content: ImageDialogComponent
    }
};
const EMPTY_PARAGRAPH = '<p></p>';
/**
 * Represents the [Kendo UI Editor component for Angular]({% slug overview_editor %}).
 */
class EditorComponent {
    constructor(element, dialogService) {
        this.element = element;
        this.dialogService = dialogService;
        /**
         * Fires each time the value of the Editor is changed upon user interaction&mdash;
         * for example, when the component is blurred or the value is updated through the `viewSource` dialog.
         * When the value of the Editor is programmatically changed through its API (`ngModel`) or form binding (`formControl`),
         * the `valueChange` event is not triggered because it might cause a mix-up with the
         * built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.
         */
        this.valueChange = new EventEmitter();
        /**
         * @hidden
         */
        this.stateChange = new EventEmitter();
        this.onChangeCallback = (_) => { }; // tslint:disable-line:no-empty
        this.onTouchedCallback = (_) => { }; // tslint:disable-line:no-empty
    }
    /**
     * Sets the value of the Editor ([see example]({% slug overview_editor %}#toc-basic-usage)).
     */
    set value(value) {
        this._value = value;
        this._previousValue = value;
        if (this.view) {
            this.exec('setHTML', this._value);
        }
    }
    get value() {
        let value = this.view ? this.getSource() : this._value;
        if (value === EMPTY_PARAGRAPH) {
            return this._value ? '' : this._value;
        }
        else {
            return value;
        }
    }
    get className() {
        return 'k-widget k-editor';
    }
    ngAfterViewInit() {
        const that = this;
        const containerNativeElement = this.container.element.nativeElement;
        const contentNode = createContentNode(this.value);
        const state = EditorState.create({
            schema: schema,
            doc: contentNode,
            plugins: [
                history(),
                keymap(buildKeymap(schema)),
                keymap({
                    'Mod-z': undo,
                    'Mod-y': redo
                }),
                keymap(baseKeymap)
            ]
        });
        this.view = new EditorView(containerNativeElement, {
            state,
            dispatchTransaction: function (tr) {
                // `this` is bound to the view instance.
                this.updateState(this.state.apply(tr));
                that.stateChange.emit(updateToolBar(this));
                // When the user utilizes keyboard shortcuts&mdash;for example, `Ctrl`+`b`&mdash;
                // `tr.docChanged` is `true` and the toolbar is not updated.
                // A possible future solution is to move the keymaps to the service.
                // if (!tr.docChanged) {
                //     that.stateChange.emit(updateToolBar(that.view));
                // }
            }
        });
        this.subs = fromEvent$1(this.container.element.nativeElement, 'keyup').pipe(map$1((e) => e.keyCode), filter$1((code) => code === 121), // F10
        map$1(() => this.userToolBar || this.defaultToolbar))
            .subscribe((toolbar) => toolbar.nativeElement.focus());
        const blur$ = fromEvent$1(this.element.nativeElement, 'focusout').pipe(filter$1((event) => !this.element.nativeElement.contains(event.relatedTarget)));
        this.subs.add(
        //on blur & new value
        blur$.pipe(map$1(() => this.value), filter$1((value) => !hasSameMarkup(value, that._previousValue)))
            .subscribe((value) => {
            this._previousValue = value;
            this.onChangeCallback(value);
            this.valueChange.emit(value);
        }));
        this.subs.add(
        //on every blur
        blur$.subscribe(() => this.onTouchedCallback()));
    }
    /**
     * Executes a command on the currently selected text.
     *
     * @param {EditorCommand} commandName - The command that will be executed.
     * @param {any} attr - Optional parameters for the command. Apart from the following list, the parameters do not expect specific attributes when you call them:
     * - `format` - Accepts an object with the `tag` property.
     * The supported tags are `p`, `blockquote`, and any of the `h1` to `h6` heading tags.
     * - `createLink` - Accepts an object with the `href`, `title`, and `target` properties. The `href` property is mandatory.
     * - `setHTML` - Accepts a `string` parameter.
     *
     * @example
     * ```ts-no-run
     * // Toggles the bold styling.
     * editor.exec('bold');
     *
     * // Creates a bullet list.
     * editor.exec('insertUnorderedList');
     *
     * // Creates a link.
     * editor.exec('createLink', { href: 'www.progress.com', title: 'Progress', target: 'window' });
     *
     * // Changes the format of a text block.
     * editor.exec('format', { tag: 'h2' });
     *
     * // Changes the content of the Editor.
     * editor.exec('setHTML', '<p>HTML content</p>');
     * ```
     */
    exec(commandName, attr) {
        // Finds a command and applies the attributes.
        const command = editorCommands[commandName](attr);
        // Executes a ProseMirror command.
        command(this.view.state, this.view.dispatch, this.view);
        // See the `dispatchTransaction` comments.
        // this.stateChange.emit(updateToolBar(this.view));
    }
    /**
     * Opens a dialog.
     * @param {DialogCommand} dialogName - The name of the dialog that will open.
     *
     * The supported values are:
     * * `createLink`
     * * `viewSource`
     *
     * @example
     * ```ts-no-run
     * // Opens a `createLink` dialog.
     * editor.openDialog('createLink');
     *
     * // Opens a `viewSource` dialog.
     * editor.exec('viewSource');
     * ```
     */
    openDialog(dialogName) {
        const dialog = editorDialogs[dialogName];
        const dialogRef = this.dialogService.open(dialog);
        dialogRef.content.instance.editor = this;
        dialogRef.content.instance.setData(this.view.state);
    }
    /**
     * Manually focus the Editor.
     */
    focus() {
        this.view.focus();
    }
    /**
     * Manually blur the Editor.
     */
    blur() {
        this.view.dom.blur();
    }
    /**
     * @hidden
     */
    getSource() {
        return getHTML(this.view.state);
    }
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
    /**
     * @hidden
     */
    writeValue(value) {
        // To avoid confusion, non-existent values are always undefined.
        this.value = value === null ? undefined : value;
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
}
EditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'kendo-editor',
                providers: [
                    DialogService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => EditorComponent),
                        multi: true
                    }
                ],
                template: `
        <ng-content select="kendo-toolbar"></ng-content>
        <kendo-toolbar *ngIf="!userToolBar" #defaultToolbar>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorButton="bold"></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorButton="italic"></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorButton="underline"></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-dropdownlist kendoEditorDropDown="format"></kendo-toolbar-dropdownlist>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorButton="insertUnorderedList"></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorButton="insertOrderedList"></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <!-- <kendo-toolbar-dialog kendoEditorCommand="createLink"></kendo-toolbar-dialog> -->
        </kendo-toolbar>
        <div #content class="k-content" style="height: 300px;"></div>
        <div kendoDialogContainer></div>
    `,
                styles: [`
        >>> .k-content > .ProseMirror {
            height: 100%;
            width: 100%;
            box-sizing: border-box;
            outline: none;
            overflow: scroll;
        }
    `]
            },] },
];
/** @nocollapse */
EditorComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: DialogService, },
];
EditorComponent.propDecorators = {
    'value': [{ type: Input },],
    'valueChange': [{ type: Output },],
    'className': [{ type: HostBinding, args: ['class',] },],
    'userToolBar': [{ type: ContentChild, args: [ToolBarComponent, { read: ElementRef },] },],
    'container': [{ type: ViewChild, args: ['content', { read: ViewContainerRef },] },],
    'defaultToolbar': [{ type: ViewChild, args: ['defaultToolbar', { read: ElementRef },] },],
};

/**
 * @hidden
 */
class ToolBarDropDownListComponent extends ToolBarToolComponent {
    constructor() {
        super(...arguments);
        this.valueChange = new EventEmitter();
    }
    get outerWidth() {
        if (this.element) {
            return outerWidth(this.element.nativeElement);
        }
    }
}
ToolBarDropDownListComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:no-forward-ref
                providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => ToolBarDropDownListComponent) }],
                selector: 'kendo-toolbar-dropdownlist',
                template: `
        <ng-template #toolbarTemplate>
            <kendo-dropdownlist #element
                [defaultItem]="defaultItem"
                [textField]="textField"
                [valueField]="valueField"
                [data]="data"
                [value]="value"
                [valuePrimitive]="valuePrimitive"
                [itemDisabled]="itemDisabled"
                (valueChange)="valueChange.emit($event)"
            >
            </kendo-dropdownlist>
        </ng-template>
    `
            },] },
];
/** @nocollapse */
ToolBarDropDownListComponent.ctorParameters = () => [];
ToolBarDropDownListComponent.propDecorators = {
    'textField': [{ type: Input },],
    'valueField': [{ type: Input },],
    'valuePrimitive': [{ type: Input },],
    'value': [{ type: Input },],
    'data': [{ type: Input },],
    'defaultItem': [{ type: Input },],
    'itemDisabled': [{ type: Input },],
    'valueChange': [{ type: Output },],
    'toolbarTemplate': [{ type: ViewChild, args: ['toolbarTemplate',] },],
    'element': [{ type: ViewChild, args: ['element',] },],
};

/**
 * @hidden
 */
const commandIcons = {
    bold: 'bold',
    italic: 'italic',
    underline: 'underline',
    strikethrough: 'strikethrough',
    createLink: 'link-horizontal',
    unlink: 'unlink-horizontal',
    insertOrderedList: 'list-ordered',
    insertUnorderedList: 'list-unordered',
    indent: 'indent-increase',
    outdent: 'indent-decrease',
    alignLeft: 'align-left',
    alignCenter: 'align-center',
    alignRight: 'align-right',
    alignJustify: 'align-justify',
    viewSource: 'html',
    undo: 'undo',
    redo: 'redo',
    insertImage: 'image',
    subscript: 'sub-script',
    superscript: 'sup-script'
};

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)). According to the command that
 * is passed to it, `kendoEditorButton` predefines the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` or `disabled` state of the button while the user is editing.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorButton="bold"></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorButton="bold" icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorButtonDirective {
    constructor(button, editor) {
        this.button = button;
        this.editor = editor;
    }
    ngOnInit() {
        if (!this.button.icon) {
            this.button.icon = commandIcons[this.command];
        }
        this.subs = this.button.click.subscribe(() => {
            this.editor.exec(this.command);
            this.editor.focus();
        });
        this.subs.add(this.editor.stateChange.subscribe((state) => {
            if (this.command === 'indent' || this.command === 'outdent') {
                this.button.disabled = !state[this.command];
            }
            else if (this.command === 'unlink') {
                this.button.disabled = !state.link;
            }
            else if (this.command === 'undo' || this.command === 'redo') {
                this.button.disabled = state[this.command];
            }
            else {
                this.button.selected = state[this.command];
            }
        }));
    }
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
}
EditorButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorButton]'
            },] },
];
/** @nocollapse */
EditorButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent, },
    { type: EditorComponent, decorators: [{ type: Host },] },
];
EditorButtonDirective.propDecorators = {
    'command': [{ type: Input, args: ['kendoEditorButton',] },],
};

/**
 * A directive which configures an existing `ToolBarDropDownComponent` as an Editor format tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)). `kendoEditorDropDown` predefines
 * the `defaultItem`, `data`, and `valueChange` event handlers. In addition,
 * the directive updates the selected item while the user is editing.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-dropdownlist kendoEditorDropDown="format"></kendo-toolbar-dropdownlist>
 * ```
 */
class EditorDropDownDirective {
    constructor(dropdownlist, editor) {
        this.dropdownlist = dropdownlist;
        this.editor = editor;
        /**
         * Defines the built-in drop-down list that will be opened. Can be of the `DialogCommand` type.
         * The supported value is `format`.
         */
        this.command = 'format'; // tslint:disable-line:no-input-rename
    }
    ngOnInit() {
        this.dropdownlist.textField = 'text';
        this.dropdownlist.valueField = 'tag';
        this.dropdownlist.valuePrimitive = true;
        this.dropdownlist.itemDisabled = (itemArgs) => {
            return itemArgs.dataItem.tag === '';
        };
        this.dropdownlist.data = [
            { text: 'Paragraph', tag: 'p' },
            { text: 'Quotation', tag: 'blockquote' },
            { text: 'Heading 1', tag: 'h1' },
            { text: 'Heading 2', tag: 'h2' },
            { text: 'Heading 3', tag: 'h3' },
            { text: 'Heading 4', tag: 'h4' },
            { text: 'Heading 5', tag: 'h5' },
            { text: 'Heading 6', tag: 'h6' }
        ];
        //TODO: style headings via template
        this.dropdownlist.defaultItem = { text: 'Format', tag: '' };
        this.dropdownlist.valueChange.subscribe((value) => {
            this.editor.exec('format', { tag: value });
            this.editor.focus();
        });
        this.editor.stateChange.subscribe(({ format }) => {
            const index = this.dropdownlist.data.findIndex(item => item.tag === format.tag);
            this.dropdownlist.value = (index !== -1) ? format.tag : '';
        });
    }
}
EditorDropDownDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-dropdownlist[kendoEditorDropDown]'
            },] },
];
/** @nocollapse */
EditorDropDownDirective.ctorParameters = () => [
    { type: ToolBarDropDownListComponent, },
    { type: EditorComponent, decorators: [{ type: Host },] },
];
EditorDropDownDirective.propDecorators = {
    'command': [{ type: Input, args: ['kendoEditorDropDown',] },],
};

/**
 * @hidden
 */
class ToolBarComboBoxComponent extends ToolBarToolComponent {
    constructor() {
        super(...arguments);
        this.valueChange = new EventEmitter();
    }
    get outerWidth() {
        if (this.element) {
            return outerWidth(this.element.nativeElement);
        }
    }
}
ToolBarComboBoxComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:no-forward-ref
                providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => ToolBarComboBoxComponent) }],
                selector: 'kendo-toolbar-combobox',
                template: `
        <ng-template #toolbarTemplate>
            <kendo-combobox #element
                [placeholder]="placeholder"
                [textField]="textField"
                [valueField]="valueField"
                [data]="data"
                [value]="value"
                (valueChange)="valueChange.emit($event)"
            >
            </kendo-combobox>
        </ng-template>
    `
            },] },
];
/** @nocollapse */
ToolBarComboBoxComponent.ctorParameters = () => [];
ToolBarComboBoxComponent.propDecorators = {
    'textField': [{ type: Input },],
    'valueField': [{ type: Input },],
    'data': [{ type: Input },],
    'value': [{ type: Input },],
    'placeholder': [{ type: Input },],
    'valueChange': [{ type: Output },],
    'toolbarTemplate': [{ type: ViewChild, args: ['toolbarTemplate',] },],
    'element': [{ type: ViewChild, args: ['element',] },],
};

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)). `kendoEditorDialog` predefines
 * the `icon` and the dialog type that will be open on `click`. In addition,
 * the directive updates the `selected` or `disabled` state of the button while the user is editing.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorDialog="viewSource"></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorDialog="viewSource" icon="blogger"></kendo-toolbar-button>
 * ```
 */
class EditorDialogDirective {
    constructor(button, editor) {
        this.button = button;
        this.editor = editor;
    }
    ngOnInit() {
        if (!this.button.icon) {
            this.button.icon = commandIcons[this.command];
        }
        this.subs = this.button.click.subscribe(() => {
            this.editor.openDialog(this.command);
        });
        this.subs.add(this.editor.stateChange.subscribe((state) => {
            if (this.command === 'createLink') {
                this.button.disabled = state.link ? false : state.noSelection;
            }
        }));
    }
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
}
EditorDialogDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorDialog]'
            },] },
];
/** @nocollapse */
EditorDialogDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent, },
    { type: EditorComponent, decorators: [{ type: Host },] },
];
EditorDialogDirective.propDecorators = {
    'command': [{ type: Input, args: ['kendoEditorDialog',] },],
};

const COMPONENT_DIRECTIVES = [
    EditorButtonDirective,
    EditorDropDownDirective,
    EditorDialogDirective
];
const TOOLBAR_TOOLS = [
    ToolBarDropDownListComponent,
    ToolBarComboBoxComponent
];
const TOOLBAR_DIALOGS = [
    LinkDialogComponent,
    SourceDialogComponent,
    ImageDialogComponent
];
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }}) definition for the Editor component.
 *
 * The package exports:
 * - `EditorComponent`&mdash;The `EditorComponent` class.
 * - `EditorButtonDirective`&mdash;The `EditorButton` directive class.
 * - `EditorDropDownDirective`&mdash;The `EditorDropDown` directive class.
 * - `EditorDialogDirective`&mdash;The `EditorDialog` directive class.
 * - `ToolBarDropDownListComponent`&mdash;The `ToolBarDropDownListComponent` directive class.
 * - `ButtonModule`&mdash;The `KendoButton` module.
 * - `ToolBarModule`&mdash;The `KendoToolBar` module.
 *
 *  * @example
 *
 * ```ts-no-run
 * // Import the Editor module
 * import { EditorModule } from '@progress/kendo-angular-editor';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare the app component
 *     imports:      [BrowserModule, EditorModule], // import the Editor module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
class EditorModule {
}
EditorModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    EditorComponent,
                    COMPONENT_DIRECTIVES,
                    TOOLBAR_TOOLS,
                    TOOLBAR_DIALOGS
                ],
                exports: [
                    EditorComponent,
                    COMPONENT_DIRECTIVES,
                    TOOLBAR_TOOLS,
                    ToolBarModule,
                    ButtonModule,
                    FormsModule,
                    ReactiveFormsModule
                ],
                imports: [
                    CommonModule,
                    ToolBarModule,
                    DropDownsModule,
                    DialogModule,
                    ButtonModule,
                    FormsModule,
                    ReactiveFormsModule
                ],
                entryComponents: [
                    TOOLBAR_DIALOGS
                ]
            },] },
];
/** @nocollapse */
EditorModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { ImageDialogComponent as ɵh, LinkDialogComponent as ɵf, SourceDialogComponent as ɵg, EditorButtonDirective as ɵa, EditorDialogDirective as ɵd, EditorDropDownDirective as ɵb, ToolBarComboBoxComponent as ɵe, ToolBarDropDownListComponent as ɵc, EditorComponent, EditorModule };
