import { Component, ContentChild, Directive, ElementRef, EventEmitter, Host, HostBinding, Input, NgModule, Output, ViewChild, ViewContainerRef, forwardRef } from '@angular/core';
import { FormControl, FormGroup, FormsModule, NG_VALUE_ACCESSOR, ReactiveFormsModule, Validators } from '@angular/forms';
import { fromEvent as fromEvent$1 } from 'rxjs/observable/fromEvent';
import { map as map$1 } from 'rxjs/operators/map';
import { filter as filter$1 } from 'rxjs/operators/filter';
import { ToolBarButtonComponent, ToolBarComponent, ToolBarModule, ToolBarToolComponent } from '@progress/kendo-angular-toolbar';
import { DialogContentBase, DialogModule, DialogRef, DialogService } from '@progress/kendo-angular-dialog';
import { EditorView } from 'prosemirror-view';
import { autoJoin, baseKeymap, chainCommands, exitCode, setBlockType, toggleMark } from 'prosemirror-commands';
import { AllSelection, EditorState, NodeSelection, TextSelection } from 'prosemirror-state';
import { keymap } from 'prosemirror-keymap';
import { history, redo, undo } from 'prosemirror-history';
import { __assign, __extends } from 'tslib';
import { DOMParser, DOMSerializer, Fragment, Node, NodeRange, Schema, Slice } from 'prosemirror-model';
import { liftListItem, sinkListItem, splitListItem, wrapInList } from 'prosemirror-schema-list';
import { undoInputRule } from 'prosemirror-inputrules';
import { ReplaceAroundStep, liftTarget } from 'prosemirror-transform';
import { CommonModule } from '@angular/common';
import { DropDownsModule } from '@progress/kendo-angular-dropdowns';
import { ButtonModule } from '@progress/kendo-angular-buttons';

/**
 * @hidden
 */
function outerWidth(element) {
    var width = element.offsetWidth;
    var style = getComputedStyle(element);
    width += (parseFloat(style.marginLeft) || 0 + parseFloat(style.marginRight) || 0);
    return width;
}
/**
 * @hidden
 */
var serializeDOMAttrs = function (el) {
    return Array.from(el.attributes)
        .reduce(function (acc, curr) {
        return Object.assign({}, acc, (_a = {}, _a[curr.name] = curr.value, _a));
        var _a;
    }, {});
};
/**
 * @hidden
 */
var removeEntries = function (obj, predicate) {
    return Object.keys(obj)
        .filter(function (key) { return predicate(key); })
        .reduce(function (acc, curr) {
        return Object.assign(acc, (_a = {}, _a[curr] = obj[curr], _a));
        var _a;
    }, {});
};
/**
 * @hidden
 */
var removeEmptyEntries = function (obj) {
    var predicate = function (key) { return obj[key] !== null && obj[key] !== undefined && obj[key] !== ''; };
    return removeEntries(obj, predicate);
};
/**
 * @hidden
 */
var isEmpty = function (obj) { return Object.keys(obj).length === 0; };
/**
 * @hidden
 */
var isNullOrUndefined = function (value) { return value === undefined || value === null; };
/**
 * @hidden
 */
var safeString = function (value) { return isNullOrUndefined(value) ? '' : value.toString(); };
/**
 * @hidden
 */
var first = function (arr) { return arr[0]; };
/**
 * @hidden
 */
var last = function (arr) { return arr[arr.length - 1]; };
/**
 * @hidden
 */
var unique = function (arr) { return Array.from(new Set(arr)); };

var SLOT = 0; //https://prosemirror.net/docs/guide/#schema.serialization_and_parsing
var commonAttributes = function () {
    return {
        style: { default: null },
        class: { default: null },
        id: { default: null }
    };
};
/**
 * @hidden
 */
var marks = {
    // TODO: Add target.
    // :: MarkSpec A link. Has `href` and `title` attributes. `title`
    // defaults to an empty string. Rendered and parsed as an `<a>`
    // element.
    link: {
        attrs: {
            href: { default: '' },
            title: { default: null }
        },
        inclusive: false,
        parseDOM: [{
                tag: 'a[href]',
                getAttrs: function (dom) { return ({
                    href: dom.getAttribute('href'),
                    title: dom.getAttribute('title')
                }); }
            }],
        toDOM: function (mark) { return [
            'a',
            // Add default value for href. Otherwise the link is not rendered properly(blue with underline)
            Object.assign({}, { href: '' }, removeEmptyEntries(mark.attrs)),
            SLOT
        ]; }
    },
    // :: MarkSpec An emphasis mark. Rendered as an `<em>` element.
    // Has parse rules that also match `<i>` and `font-style: italic`.
    em: {
        parseDOM: [
            { tag: 'i' },
            { tag: 'em' },
            { style: 'font-style=italic' }
        ],
        toDOM: function () { return ['em', SLOT]; }
    },
    // :: MarkSpec A strong mark. Rendered as `<strong>`, parse rules
    // also match `<b>` and `font-weight: bold`.
    strong: {
        parseDOM: [
            { tag: 'strong' },
            // This works around a Google Docs misbehavior where
            // pasted content will be inexplicably wrapped in `<b>`
            // tags with a font-weight normal `{tag: 'b', getAttrs: node => node.style.fontWeight != 'normal' && null}`,
            {
                style: 'font-weight',
                // According to the docs, the value can be a DOM element (for tag rules) or a string (for style rules).
                getAttrs: function (value) { return /^(bold(er)?|[5-9]\d{2,})$/.test(value) && null; }
            }
        ],
        toDOM: function () { return ['strong', SLOT]; }
    },
    // :: MarkSpec Code font mark. Represented as a `<code>` element.
    code: {
        parseDOM: [{ tag: 'code' }],
        toDOM: function () { return ['code', SLOT]; }
    },
    // :: MarkSpec An underline mark. Rendered as a `<u>` element.
    // Parse rules also match `text-decoration: underline`.
    underline: {
        parseDOM: [
            { tag: 'u' },
            { style: 'text-decoration=underline' }
        ],
        toDOM: function () { return ['u', SLOT]; }
    },
    // :: MarkSpec A strikethrough mark. Rendered as a `<del>` element.
    // Parse rules also match `<s>`, `<strike>`, `text-decoration: line-through`.
    strikethrough: {
        parseDOM: [
            { tag: 'del' },
            { tag: 's' },
            { tag: 'strike' },
            { style: 'text-decoration=line-through' }
        ],
        toDOM: function () { return ['del', SLOT]; }
    },
    // :: MarkSpec A subscript mark. Rendered as a `<sub>` element.
    // Parse rules also match `vertical-align: sub`.
    subscript: {
        parseDOM: [
            { tag: 'sub' },
            { style: 'vertical-align=sub' }
        ],
        toDOM: function () { return ['sub', SLOT]; }
    },
    // :: MarkSpec A superscript mark. Rendered as a `<sup>` element.
    // Parse rules also match `vertical-align: super`.
    superscript: {
        parseDOM: [
            { tag: 'sup' },
            { style: 'vertical-align=super' }
        ],
        toDOM: function () { return ['sup', SLOT]; }
    }
};
/**
 * @hidden
 */
var nodes = {
    // :: NodeSpec The top level document node.
    doc: {
        content: 'block+'
    },
    // :: NodeSpec A plain textblock paragraph. Represented
    // as a `<p>` element in the DOM.
    paragraph: {
        content: 'inline*',
        group: 'block',
        attrs: __assign({}, commonAttributes()),
        parseDOM: [{
                tag: 'p',
                getAttrs: serializeDOMAttrs
            }],
        toDOM: function (node) { return isEmpty(node.attrs) ? ['p', SLOT] : ['p', removeEmptyEntries(node.attrs), SLOT]; }
    },
    // :: NodeSpec A blockquote (`<blockquote>`) which wraps one or more blocks.
    blockquote: {
        content: 'inline*',
        group: 'block',
        attrs: __assign({}, commonAttributes()),
        defining: true,
        parseDOM: [{ tag: 'blockquote' }],
        toDOM: function (node) { return ['blockquote', removeEmptyEntries(node.attrs), SLOT]; }
    },
    // :: NodeSpec A horizontal (`<hr>`) rule.
    horizontalRule: {
        group: 'block',
        parseDOM: [{ tag: 'hr' }],
        toDOM: function () { return ['hr']; }
    },
    // :: NodeSpec A heading textblock with a `level` attribute that
    // has to hold a number from 1 to 6. Parsed and serialized as an `<h1>` to
    // an `<h6>` element.
    heading: {
        attrs: __assign({ level: { default: 1 } }, commonAttributes()),
        content: 'inline*',
        group: 'block',
        defining: true,
        parseDOM: [
            { tag: 'h1', attrs: { level: 1 } },
            { tag: 'h2', attrs: { level: 2 } },
            { tag: 'h3', attrs: { level: 3 } },
            { tag: 'h4', attrs: { level: 4 } },
            { tag: 'h5', attrs: { level: 5 } },
            { tag: 'h6', attrs: { level: 6 } }
        ],
        toDOM: function (node) {
            var attrs = removeEntries(node.attrs, function (key) { return key !== 'level'; });
            return ['h' + node.attrs.level, removeEmptyEntries(attrs), SLOT];
        }
    },
    // :: NodeSpec A code listing. Prevents marks or non-text inline
    // nodes by default. Represented as a `<pre>` element with a
    // `<code>` element inside.
    codeBlock: {
        content: 'text*',
        marks: '',
        group: 'block',
        code: true,
        defining: true,
        parseDOM: [{
                tag: 'pre',
                preserveWhitespace: 'full'
            }],
        toDOM: function () { return ['pre', ['code', SLOT]]; }
    },
    // :: NodeSpec The text node.
    text: {
        group: 'inline'
    },
    // :: NodeSpec An inline image (`<img>`) node. Supports `src`,
    // `alt`, and `href` attributes. The last two default to an empty
    // string.
    image: {
        inline: true,
        attrs: __assign({}, commonAttributes(), { src: {}, alt: { default: null }, width: { default: null }, height: { default: null } }),
        group: 'inline',
        draggable: true,
        parseDOM: [{
                tag: 'img[src]',
                getAttrs: function (dom) { return ({
                    src: dom.getAttribute('src'),
                    alt: dom.getAttribute('alt'),
                    width: dom.getAttribute('width'),
                    height: dom.getAttribute('height')
                }); }
            }],
        toDOM: function (node) { return ['img', removeEmptyEntries(node.attrs)]; }
    },
    // :: NodeSpec A hard line break. Represented as a `<br>` element in the DOM.
    hardBreak: {
        inline: true,
        group: 'inline',
        selectable: false,
        parseDOM: [{ tag: 'br' }],
        toDOM: function () { return ['br']; }
    },
    // :: NodeSpec A list item. Represented as a `<li>` element.
    listItem: {
        attrs: __assign({}, commonAttributes()),
        content: 'paragraph block*',
        marks: '_',
        parseDOM: [{ tag: 'li' }],
        toDOM: function (node) { return ['li', removeEmptyEntries(node.attrs), SLOT]; }
    },
    // :: NodeSpec An ordered list. Represented as an `<ol>` element.
    // Has a single `order` attribute which determines the number at which
    // the list starts counting. Defaults to 1.
    orderedList: {
        attrs: {
            order: {
                default: 1
            }
        },
        content: 'listItem+',
        group: 'block',
        parseDOM: [{
                tag: 'ol',
                getAttrs: function (dom) { return ({
                    order: dom.hasAttribute('start') ? parseInt(dom.getAttribute('start'), 10) : 1
                }); }
            }],
        toDOM: function (node) { return (node.attrs.order === 1 ? ['ol', SLOT] : ['ol', { start: node.attrs.order }, SLOT]); }
    },
    // :: NodeSec An unordered list. Represented as a `<ul>` element.
    bulletList: {
        content: 'listItem+',
        group: 'block',
        parseDOM: [{ tag: 'ul' }],
        toDOM: function () { return ['ul', SLOT]; }
    }
};
/**
 * @hidden
 */
var schema = new Schema({
    nodes: nodes,
    marks: marks
});

var mac = typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false;
// https://github.com/ProseMirror/prosemirror-example-setup/blob/master/src/keymap.js
/**
 * @hidden
 */
function buildKeymap(schema, mapKeys) {
    var keys = {};
    function bind(key, cmd) {
        if (mapKeys) {
            var mapped = mapKeys[key];
            if (mapped === false) {
                return;
            }
            if (mapped) {
                key = mapped;
            }
        }
        keys[key] = cmd;
    }
    bind('Mod-z', undo);
    bind('Shift-Mod-z', redo);
    bind('Backspace', undoInputRule);
    if (!mac) {
        bind('Mod-y', redo);
    }
    if (schema.marks.strong) {
        bind('Mod-b', toggleMark(schema.marks.strong));
    }
    if (schema.marks.em) {
        bind('Mod-i', toggleMark(schema.marks.em));
    }
    if (schema.marks.underline) {
        bind('Mod-u', toggleMark(schema.marks.underline));
    }
    if (schema.nodes.hardBreak) {
        var br_1 = schema.nodes.hardBreak, cmd = chainCommands(exitCode, function (state, dispatch) {
            dispatch(state.tr.replaceSelectionWith(br_1.create()).scrollIntoView());
            return true;
        });
        bind('Mod-Enter', cmd);
        bind('Shift-Enter', cmd);
        if (mac) {
            bind('Ctrl-Enter', cmd);
        }
    }
    if (schema.nodes.listItem) {
        bind('Enter', splitListItem(schema.nodes.listItem));
    }
    return keys;
}

var style = function (name, value) {
    return { name: name, value: value };
};
/**
 * @hidden
 */
var alignLeftRules = [
    { node: 'paragraph', style: [style('text-align', 'left')] },
    { node: 'heading', style: [style('text-align', 'left')] },
    { node: 'listItem', style: [style('text-align', 'left'), style('list-style-position', 'inside')] }
];
/**
 * @hidden
 */
var alignRightRules = [
    { node: 'paragraph', style: [style('text-align', 'right')] },
    { node: 'heading', style: [style('text-align', 'right')] },
    { node: 'listItem', style: [style('text-align', 'right'), style('list-style-position', 'inside')] }
];
/**
 * @hidden
 */
var alignCenterRules = [
    { node: 'paragraph', style: [style('text-align', 'center')] },
    { node: 'heading', style: [style('text-align', 'center')] },
    { node: 'listItem', style: [style('text-align', 'center'), style('list-style-position', 'inside')] }
];
/**
 * @hidden
 */
var alignRemoveRules = [
    { node: 'paragraph', style: [style('text-align', '')] },
    { node: 'heading', style: [style('text-align', '')] },
    { node: 'listItem', style: [style('text-align', ''), style('list-style-position', '')] }
];

var _a = schema.nodes;
var blockquote = _a.blockquote;
var bulletList = _a.bulletList;
var doc = _a.doc;
var heading = _a.heading;
var listItem = _a.listItem;
var orderedList = _a.orderedList;
var paragraph = _a.paragraph;
var image = _a.image;
var getTypeName = function (n) {
    return n instanceof Node ? n.type.name : n.name;
};
var isListType = function (node) {
    var nodeName = typeof node === 'string' ? node : getTypeName(node);
    return nodeName === getTypeName(orderedList) || nodeName === getTypeName(bulletList);
};
var getListTypeFromPos = function (pos) {
    return Array.from(new Array(pos.depth), function (_, index) { return pos.depth - index; })
        .map(function (depth) { return pos.node(depth); })
        .map(getTypeName)
        .find(isListType);
};
/**
 * @hidden
 */
function isMarkActive(state, markType) {
    var _a = state.selection, from = _a.from, $from = _a.$from, to = _a.to, empty = _a.empty;
    if (empty) {
        return !!markType.isInSet(state.storedMarks || $from.marks());
    }
    else {
        return !!state.doc.rangeHasMark(from, to, markType);
    }
}
/**
 * @hidden
 */
function isNodeActive(state, nodeType, attrs) {
    var parent = findParentNode(function (node) { return getTypeName(node) === getTypeName(nodeType); })(state.selection);
    if (!parent || (attrs && !Object.keys(attrs).length)) {
        return !!parent;
    }
    return parent.node.hasMarkup(nodeType, attrs);
}
/**
 * @hidden
 */
var isInListOfType = function (_a, nodeType) {
    var selection = _a.selection;
    var $anchor = selection.$anchor, $head = selection.$head;
    var topNodes = [];
    var anchorParentName = getListTypeFromPos($anchor);
    var headParentName = getListTypeFromPos($head);
    selection.content().content.descendants(function (n) {
        topNodes = topNodes.concat([n]);
        return false;
    });
    var nonListTopNodes = topNodes.filter(function (n) {
        return (getTypeName(n) !== getTypeName(bulletList)) && (getTypeName(n) !== getTypeName(orderedList));
    });
    // no selection
    if (selection instanceof TextSelection && selection.$cursor) {
        return getListTypeFromPos(selection.$cursor) === nodeType.name;
    }
    var hasSingleUniqueTopNode = unique(topNodes.map(getTypeName)).length === 1;
    // with selection
    if (nonListTopNodes.length > 0 || !hasSingleUniqueTopNode) {
        return false;
    }
    // from this point on we have guaranteed that the top nodes are all of the same LIST type
    // same top list node
    var node = first(topNodes);
    var listChildNodes = [getTypeName(node)];
    node.descendants(function (childNode) {
        if (isListType(childNode)) {
            listChildNodes = listChildNodes.concat([getTypeName(childNode)]);
        }
    });
    if (last(listChildNodes) !== nodeType.name) {
        return false;
    }
    return anchorParentName === headParentName && anchorParentName === nodeType.name;
};
/**
 * @hidden
 */
function activeNodeName(state) {
    var node;
    if (state.selection instanceof AllSelection) {
        node = state.doc;
    }
    else {
        var $anchor = state.selection.$anchor;
        var blockNode = $anchor.node($anchor.blockRange().depth);
        var isDoc = getTypeName(blockNode) === getTypeName(doc);
        node = isDoc ? $anchor.node() : blockNode;
    }
    return {
        name: getTypeName(node),
        tag: getNodeTag(node)
    };
}
/**
 * @hidden
 */
function getNodeTag(node) {
    var parseRules = node.type.spec.parseDOM;
    var nodeAttrs = node.attrs;
    var parseRule;
    if (parseRules && parseRules.length) {
        if (parseRules.length === 1) {
            parseRule = parseRules[0];
        }
        else {
            parseRule = parseRules.find(function (rule) {
                //TODO: refactor this
                return JSON.stringify(rule.attrs) === JSON.stringify(nodeAttrs);
            });
        }
    }
    if (parseRule) {
        return parseRule.tag;
    }
}
/**
 * @hidden
 */
function canIndent(state, nodeType) {
    return isNodeActive(state, nodeType) && sinkListItem(nodeType)(state);
}
/**
 * @hidden
 */
function canOutdent(state, nodeType) {
    var isNestedInOL = !!findNthParentNodeOfType(orderedList, 2)(state.selection);
    var isNestedInUL = !!findNthParentNodeOfType(bulletList, 2)(state.selection);
    return isNodeActive(state, nodeType) && (isNestedInOL || isNestedInUL) && liftListItem(nodeType)(state);
}
/**
 * @hidden
 */
function findParentNode(predicate) {
    return function (selection) {
        var $from = selection.$from;
        for (var i = $from.depth; i > 0; i--) {
            var node = $from.node(i);
            if (predicate(node)) {
                return { depth: i, node: node };
            }
        }
    };
}
/**
 * @hidden
 */
function findNthParentNode(predicate, depth) {
    if (depth === void 0) { depth = 1; }
    return function (selection) {
        var $from = selection.$from;
        for (var i = $from.depth; i > 0; i--) {
            var node = $from.node(i);
            if (predicate(node)) {
                depth = depth - 1;
                if (depth === 0) {
                    return { depth: i, node: node };
                }
            }
        }
    };
}
/**
 * @hidden
 */
function findNthParentNodeOfType(nodeType, depth) {
    if (depth === void 0) { depth = 1; }
    return function (selection) {
        return findNthParentNode(function (node) { return getTypeName(node) === getTypeName(nodeType); }, depth)(selection);
    };
}
/**
 * @hidden
 */
var getMark = function (state, markType) {
    var _a = state.selection, from = _a.from, $from = _a.$from, to = _a.to, empty = _a.empty;
    var stateDoc = state.doc;
    var mark;
    if (empty) {
        mark = markType.isInSet(state.storedMarks || $from.marks());
    }
    else {
        stateDoc.nodesBetween(from, to, function (node) {
            if (node.isInline && !mark) {
                mark = markType.isInSet(node.marks);
            }
        });
    }
    return mark;
};
/**
 * @hidden
 */
var getNodeFromSelection = function (state) {
    if (state.selection instanceof NodeSelection) {
        return state.selection.node;
    }
};
/**
 * @hidden
 */
function getMarkRange($cursor, markType) {
    var parentNode = $cursor.parent;
    var cursorNodeIndex = $cursor.index();
    var mark = parentNode.child(cursorNodeIndex).marks.find(function (m) { return m.type === markType; });
    var childCount = parentNode.childCount;
    var start = $cursor.pos - $cursor.textOffset, end = parentNode.child(cursorNodeIndex).nodeSize, index, nodeSize;
    index = cursorNodeIndex - 1;
    while (index >= 0 && mark.isInSet(parentNode.child(index).marks)) {
        nodeSize = parentNode.child(index).nodeSize;
        end += nodeSize;
        start -= nodeSize;
        index -= 1;
    }
    index = cursorNodeIndex + 1;
    while (index < childCount && mark.isInSet(parentNode.child(index).marks)) {
        end += parentNode.child(index).nodeSize;
        index += 1;
    }
    return { from: start, to: start + end };
}
/**
 * @hidden
 */
var removeMark = function (markType) { return function (state, dispatch) {
    var _a = state.selection, from = _a.from, to = _a.to, $cursor = _a.$cursor;
    if ($cursor) {
        var resolvedRange = getMarkRange($cursor, markType);
        dispatch(state.tr.removeMark(resolvedRange.from, resolvedRange.to, markType));
    }
    else {
        dispatch(state.tr.removeMark(from, to, markType));
    }
}; };
/**
 * @hidden
 */
var modifyMark = function (markType, attrs) { return function (state, dispatch) {
    var tr = state.tr;
    var _a = state.selection, $cursor = _a.$cursor, from = _a.from, to = _a.to;
    if (!$cursor) {
        tr.doc.nodesBetween(from, to, function (node, pos) {
            if (node.isInline && markType.isInSet(node.marks)) {
                tr.removeMark(pos, pos + node.nodeSize, markType);
                tr.addMark(pos, pos + node.nodeSize, markType.create(attrs));
                dispatch(tr);
            }
        });
    }
    else {
        var parentNode = $cursor.parent;
        var cursorNodeIndex = $cursor.index();
        var mark = parentNode.child(cursorNodeIndex).marks.find(function (m) { return m.type === markType; });
        var childCount = parentNode.childCount;
        var markStart = $cursor.pos - $cursor.textOffset, markSize = parentNode.child(cursorNodeIndex).nodeSize, index = void 0, nodeSize = void 0;
        index = cursorNodeIndex - 1;
        while (index >= 0 && mark.isInSet(parentNode.child(index).marks)) {
            nodeSize = parentNode.child(index).nodeSize;
            markSize += nodeSize;
            markStart -= nodeSize;
            index -= 1;
        }
        index = cursorNodeIndex + 1;
        while (index < childCount && mark.isInSet(parentNode.child(index).marks)) {
            markSize += parentNode.child(index).nodeSize;
            index += 1;
        }
        tr.removeMark(markStart, markStart + markSize, markType);
        tr.addMark(markStart, markStart + markSize, markType.create(attrs));
        dispatch(tr);
    }
}; };
/**
 * @hidden
 */
var toggleBold = toggleMark(schema.marks.strong);
/**
 * @hidden
 */
var toggleItalic = toggleMark(schema.marks.em);
/**
 * @hidden
 */
var toggleUnderline = toggleMark(schema.marks.underline);
/**
 * @hidden
 */
var toggleStrikethrough = toggleMark(schema.marks.strikethrough);
/**
 * @hidden
 */
var toggleSubscript = toggleMark(schema.marks.subscript);
/**
 * @hidden
 */
var toggleSuperscript = toggleMark(schema.marks.superscript);
/**
 * @hidden
 */
var createLink = function (linkAttrs) { return function (state, dispatch) {
    if (isMarkActive(state, schema.marks.link)) {
        modifyMark(schema.marks.link, linkAttrs)(state, dispatch);
    }
    else {
        toggleMark(schema.marks.link, linkAttrs)(state, dispatch);
    }
}; };
/**
 * @hidden
 */
var applyHeading = function (level) { return setBlockType(heading, { level: level }); };
/**
 * @hidden
 */
var applyParagraph = setBlockType(paragraph);
/**
 * @hidden
 */
var applyBlockquote = setBlockType(blockquote);
/**
 * @hidden
 */
var format = function (_a) {
    var tag = _a.tag;
    if (tag.match(/h\d\b/)) {
        return applyHeading(parseInt(tag[1], 10));
    }
    else if (tag === 'p') {
        return applyParagraph;
    }
    else if (tag === 'blockquote') {
        return applyBlockquote;
    }
};
/**
 * @hidden
 */
var indent = sinkListItem(listItem);
/**
 * @hidden
 */
var outdent = liftListItem(listItem);
/**
 * @hidden
 */
var insertImage = function (attrs) { return function (state, dispatch) {
    var node = image.createAndFill(attrs);
    dispatch(state.tr.replaceSelectionWith(node));
}; };
/**
 * @hidden
 */
var getHTML = function (state) {
    var fragment = DOMSerializer
        .fromSchema(state.schema)
        .serializeFragment(state.doc.content);
    var element = document.createElement('div');
    element.appendChild(fragment);
    return element.innerHTML;
};
/**
 * @hidden
 */
var createContentNode = function (value) {
    var element = document.createElement('div');
    // when using ngModel with name attr, content is null and errors, default params dont help
    element.innerHTML = safeString(value).trim();
    return DOMParser.fromSchema(schema).parse(element);
};
/**
 * @hidden
 */
var setHTML = function (content) { return function (state, dispatch) {
    return dispatch(state.tr
        .setSelection(new AllSelection(state.doc))
        .replaceSelectionWith(createContentNode(content)));
}; };
/**
 * @hidden
 */
var hasSameMarkup = function (dom1, dom2) {
    var fragment1 = Fragment.from(createContentNode(dom1));
    var fragment2 = Fragment.from(createContentNode(dom2));
    return fragment1.eq(fragment2);
};
/**
 * @hidden
 */
var blockNodes = function (state) {
    var selection = state.selection;
    var from = selection.from, to = selection.to, $from = selection.$from;
    var result = [];
    if (selection.node) {
        if (selection.node.isBlock) {
            result.push(selection.node);
        }
        else if ($from.parent && $from.parent.isBlock) {
            result.push($from.parent);
        }
    }
    else {
        state.doc.nodesBetween(from, to, function (node) {
            if (node.isBlock) {
                result.push(node);
            }
        });
    }
    return result;
};
/**
 * @hidden
 */
var changeStyles = function (elementStyle, newStyle) {
    var styleToChange = newStyle.style;
    var regExp = newStyle.value;
    var newValue = newStyle.newValue;
    var styleMatches = [];
    if (elementStyle) {
        var splits = elementStyle.split(/\s*;\s*/).filter(function (s) { return s; });
        var filtered = splits.filter(function (s) {
            if (!s.toLowerCase().trim().startsWith(styleToChange)) {
                return true;
            }
            var value = s.split(':')[1].trim();
            if (regExp.test(value)) {
                styleMatches.push(value);
                return false;
            }
            return true;
        });
        if (newValue) {
            filtered.push(styleToChange + ": " + newValue);
        }
        return {
            style: filtered.join('; ') + (filtered.length ? ';' : ''),
            changed: !!newValue || filtered.length !== splits.length,
            styleMatches: styleMatches
        };
    }
    return { changed: false, styleMatches: styleMatches, style: null };
};
/**
 * @hidden
 */
var addStyles = function (node, stylesToApply) {
    var currentStyles = node.attrs.style, changedStyleResult = null, toChange = null;
    if (currentStyles) {
        stylesToApply.forEach(function (style) {
            toChange = { style: style.name, value: /^.+$/, newValue: style.value };
            changedStyleResult = changeStyles(currentStyles, toChange);
            currentStyles = changedStyleResult.changed ? changedStyleResult.style : currentStyles;
        });
    }
    var reducer = function (acc, curr) {
        return (acc && curr.value ? acc + ' ' : '') + curr.value ? curr.name + ": " + curr.value + ";" : '';
    };
    currentStyles = currentStyles ||
        stylesToApply.reduce(reducer, '');
    return Object.assign({}, node.attrs, { style: currentStyles || null });
};
/**
 * @hidden
 */
var canChangeType = function (stateDoc, pos, type) {
    var $pos = stateDoc.resolve(pos), index = $pos.index();
    return $pos.parent.canReplaceWith(index, index + 1, type);
};
/**
 * @hidden
 */
var changeBlockNode = function (state, dispatch, tr, node, nodeType, attrs) {
    var _a = state.selection, from = _a.from, to = _a.to;
    var applicable = false;
    state.doc.nodesBetween(from, to, function (currNode, pos) {
        if (applicable) {
            return false;
        }
        if (!currNode.isTextblock || currNode.hasMarkup(nodeType, attrs)) {
            return;
        }
        if (currNode.type === nodeType) {
            applicable = true;
        }
        else {
            var $pos = state.doc.resolve(pos), index = $pos.index();
            applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType);
        }
    });
    if (!applicable) {
        return false;
    }
    if (dispatch) {
        // const tr = view.state.tr;
        // const tr = view.state.tr.setBlockType(from, to, nodeType, attrs);
        if (!nodeType.isTextblock) {
            throw new RangeError('Type given to setBlockType should be a textblock');
        }
        var mapFrom_1 = tr.steps.length;
        tr.doc.nodesBetween(from, to, function (currNode, pos) {
            if (currNode.eq(node) && currNode.isTextblock && !currNode.hasMarkup(nodeType, attrs) &&
                canChangeType(tr.doc, tr.mapping.slice(mapFrom_1).map(pos), nodeType)) {
                // Ensure all markup that isn't allowed in the new node type is cleared
                tr.clearIncompatible(tr.mapping.slice(mapFrom_1).map(pos, 1), nodeType);
                var mapping = tr.mapping.slice(mapFrom_1);
                var startM = mapping.map(pos, 1), endM = mapping.map(pos + currNode.nodeSize, 1);
                var slice = new Slice(Fragment.from(nodeType.create(attrs, null, currNode.marks)), 0, 0);
                tr.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, slice, 1, true));
                return false; // this will skip the node children
            }
        });
        // view.dispatch(tr.scrollIntoView());
    }
    return true;
};
/**
 * @hidden
 * Aligning block elements in the selection.
 *
 * @returns {boolean} - Returns true if any alignment is applied.
 */
var alignBlocks = function (actions) { return function (state, dispatch) {
    var blocks = blockNodes(state);
    var tr = state.tr;
    var result = false;
    blocks.forEach(function (node) {
        if (node.type.isTextblock) {
            var newAttrs = {};
            var action = actions.find(function (n) { return n.node === node.type.name; });
            if (action) {
                newAttrs = addStyles(node, action.style);
            }
            result = changeBlockNode(state, dispatch, tr, node, node.type, newAttrs) || result;
        }
    });
    if (result) {
        dispatch(tr.scrollIntoView());
    }
    return result;
}; };
/**
 * @hidden
 * Checks if any block element in the selection is aligned.
 */
var isAligned = function (state, actions) {
    var blocks = blockNodes(state);
    var result = false;
    blocks.forEach(function (node) {
        if (!result && node.type.isTextblock && node.attrs.style) {
            var action = actions.find(function (a) { return a.node === node.type.name; });
            if (action) {
                result = action.style.every(function (style) {
                    return !!style.value && new RegExp(style.name + ":\\s?" + style.value, 'i').test(node.attrs.style);
                });
            }
        }
    });
    return result;
};

/**
 * @hidden
 */
var rootListDepth = function (pos, nodes) {
    // Get the depth of the nearest ancestor list
    var bulletList = nodes.bulletList, orderedList = nodes.orderedList, listItem = nodes.listItem;
    var depth;
    for (var i = pos.depth - 1; i > 0; i--) {
        var node = pos.node(i);
        if (node.type === bulletList || node.type === orderedList) {
            depth = i;
        }
        if (node.type !== bulletList &&
            node.type !== orderedList &&
            node.type !== listItem) {
            break;
        }
    }
    return depth;
};
/**
 * @hidden
 */
var getListLiftTarget = function (schema, resPos) {
    // This will return (depth - 1) for root list parent of a list.
    var target = resPos.depth;
    var _a = schema.nodes, bulletList = _a.bulletList, orderedList = _a.orderedList, listItem = _a.listItem;
    for (var i = resPos.depth; i > 0; i--) {
        var node = resPos.node(i);
        if (node.type === bulletList || node.type === orderedList) {
            target = i;
        }
        if (node.type !== bulletList &&
            node.type !== orderedList &&
            node.type !== listItem) {
            break;
        }
    }
    return target - 1;
};
/**
 * @hidden
 */
function liftSelectionList(state, tr) {
    // The function will list paragraphs in selection out to level 1 below root list.
    var _a = state.selection, from = _a.from, to = _a.to;
    var paragraph = state.schema.nodes.paragraph;
    var listCol = [];
    tr.doc.nodesBetween(from, to, function (node, pos) {
        if (node.type === paragraph) {
            listCol.push({ node: node, pos: pos });
        }
    });
    for (var i = listCol.length - 1; i >= 0; i--) {
        var paragr = listCol[i];
        var start = tr.doc.resolve(tr.mapping.map(paragr.pos));
        if (start.depth > 0) {
            var end = void 0;
            if (paragr.node.textContent && paragr.node.textContent.length > 0) {
                end = tr.doc.resolve(tr.mapping.map(paragr.pos + paragr.node.textContent.length));
            }
            else {
                end = tr.doc.resolve(tr.mapping.map(paragr.pos + 1));
            }
            var range = start.blockRange(end);
            if (range) {
                tr.lift(range, getListLiftTarget(state.schema, start));
            }
        }
    }
    return tr;
}
/**
 * @hidden
 */
var toggleList = function (state, dispatch, view, listType) {
    var selection = state.selection;
    var fromNode = selection.$from.node(selection.$from.depth - 2);
    var endNode = selection.$to.node(selection.$to.depth - 2);
    if (!fromNode ||
        fromNode.type.name !== listType ||
        (!endNode || endNode.type.name !== listType)) {
        return toggleListCommand(listType)(state, dispatch, view);
    }
    else {
        var depth = rootListDepth(selection.$to, state.schema.nodes);
        var tr = liftFollowingList(state, selection.$to.pos, selection.$to.end(depth), depth, state.tr);
        tr = liftSelectionList(state, tr);
        dispatch(tr);
        return true;
    }
};
/**
 * @hidden
 */
function toggleListCommand(listType) {
    return function (state, dispatch, view) {
        if (!view) {
            return false;
        }
        state = view.state;
        var _a = state.selection, $from = _a.$from, $to = _a.$to;
        var parent = $from.node(-2);
        var grandgrandParent = $from.node(-3);
        var isRangeOfSingleType = isRangeOfType(state.doc, $from, $to, state.schema.nodes[listType]);
        if (((parent && parent.type === state.schema.nodes[listType]) ||
            (grandgrandParent &&
                grandgrandParent.type === state.schema.nodes[listType])) &&
            isRangeOfSingleType) {
            // Untoggles list
            return liftListItems()(state, dispatch);
        }
        else {
            // Wraps selection in list and converts list type e.g. bullet_list -> ordered_list if needed
            if (!isRangeOfSingleType) {
                liftListItems()(state, dispatch);
                state = view.state;
            }
            return wrapInList$1(state.schema.nodes[listType])(state, dispatch);
        }
    };
}
/**
 * @hidden
 */
function liftListItem$1(state, selection, tr) {
    var $from = selection.$from, $to = selection.$to;
    var nodeType = state.schema.nodes.listItem;
    var range = $from.blockRange($to, function (node) { return node.childCount && node.firstChild.type === nodeType; });
    if (!range ||
        range.depth < 2 ||
        $from.node(range.depth - 1).type !== nodeType) {
        return tr;
    }
    var end = range.end;
    var endOfList = $to.end(range.depth);
    if (end < endOfList) {
        tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList, new Slice(Fragment.from(nodeType.create(undefined, range.parent.copy())), 1, 0), 1, true));
        range = new NodeRange(tr.doc.resolve($from.pos), tr.doc.resolve(endOfList), range.depth);
    }
    return tr.lift(range, liftTarget(range)).scrollIntoView();
}
/**
 * @hidden
 */
function liftFollowingList(state, from, to, rootListDepthNum, tr) {
    // Function will lift list item following selection to level-1.
    var listItem = state.schema.nodes.listItem;
    var lifted = false;
    tr.doc.nodesBetween(from, to, function (node, pos) {
        if (!lifted && node.type === listItem && pos > from) {
            lifted = true;
            var listDepth = rootListDepthNum + 3;
            while (listDepth > rootListDepthNum + 2) {
                var start = tr.doc.resolve(tr.mapping.map(pos));
                listDepth = start.depth;
                var end = tr.doc.resolve(tr.mapping.map(pos + node.textContent.length));
                var sel = new TextSelection(start, end);
                tr = liftListItem$1(state, sel, tr);
            }
        }
    });
    return tr;
}
/**
 * @hidden
 */
function isRangeOfType(doc, $from, $to, nodeType) {
    // Step through block-nodes between $from and $to and returns false if a node is
    // found that isn't of the specified type
    return (getAncestorNodesBetween(doc, $from, $to).filter(function (node) { return node.type !== nodeType; }).length === 0);
}
/**
 * @hidden
 */
function getAncestorNodesBetween(doc, $from, $to) {
    // Returns all top-level ancestor-nodes between $from and $to
    var nodes = Array();
    var maxDepth = findAncestorPosition(doc, $from).depth;
    var current = doc.resolve($from.start(maxDepth));
    while (current.pos <= $to.start($to.depth)) {
        var depth = Math.min(current.depth, maxDepth);
        var node = current.node(depth);
        if (node) {
            nodes.push(node);
        }
        if (depth === 0) {
            break;
        }
        var next = doc.resolve(current.after(depth));
        if (next.start(depth) >= doc.nodeSize - 2) {
            break;
        }
        if (next.depth !== current.depth) {
            next = doc.resolve(next.pos + 2);
        }
        if (next.depth) {
            current = doc.resolve(next.start(next.depth));
        }
        else {
            current = doc.resolve(next.end(next.depth));
        }
    }
    return nodes;
}
/**
 * @hidden
 */
function findAncestorPosition(doc, pos) {
    // Traverse the document until an "ancestor" is found. Any nestable block can be an ancestor.
    var nestableBlocks = ['blockquote', 'bulletList', 'orderedList'];
    if (pos.depth === 1) {
        return pos;
    }
    var node = pos.node(pos.depth);
    var newPos = pos;
    while (pos.depth >= 1) {
        pos = doc.resolve(pos.before(pos.depth));
        node = pos.node(pos.depth);
        if (node && nestableBlocks.indexOf(node.type.name) !== -1) {
            newPos = pos;
        }
    }
    return newPos;
}
/**
 * @hidden
 */
function liftListItems() {
    return function (state, dispatch) {
        var tr = state.tr;
        var _a = state.selection, $from = _a.$from, $to = _a.$to;
        tr.doc.nodesBetween($from.pos, $to.pos, function (node, pos) {
            // Following condition will ensure that block types paragraph, heading, codeBlock, blockquote, panel are lifted.
            // isTextblock is true for paragraph, heading, codeBlock.
            if (node.isTextblock ||
                node.type.name === 'blockquote' ||
                node.type.name === 'panel') {
                var sel = new NodeSelection(tr.doc.resolve(tr.mapping.map(pos)));
                var range = sel.$from.blockRange(sel.$to);
                if (!range || sel.$from.parent.type !== state.schema.nodes.listItem) {
                    return false;
                }
                var target = range && liftTarget(range);
                if (target === undefined || target === null) {
                    return false;
                }
                tr.lift(range, target);
            }
        });
        if (dispatch) {
            dispatch(tr);
        }
        return true;
    };
}
/**
 * @hidden
 */
function wrapInList$1(nodeType) {
    return autoJoin(wrapInList(nodeType), function (before, after) { return before.type === after.type && before.type === nodeType; });
}
/**
 * @hidden
 */
function toggleUnorderedList(state, dispatch, view) {
    return toggleList(state, dispatch, view, 'bulletList');
}
/**
 * @hidden
 */
function toggleOrderedList(state, dispatch, view) {
    return toggleList(state, dispatch, view, 'orderedList');
}

var inlineCommand = {
    bold: function () { return toggleBold; },
    italic: function () { return toggleItalic; },
    createLink: function (attr) { return createLink(attr); },
    unlink: function () { return removeMark(schema.marks.link); },
    underline: function () { return toggleUnderline; },
    strikethrough: function () { return toggleStrikethrough; },
    subscript: function () { return toggleSubscript; },
    superscript: function () { return toggleSuperscript; }
};
var blockCommand = {
    format: function (formatAttr) { return format(formatAttr); },
    alignLeft: function () { return alignBlocks(alignLeftRules); },
    alignCenter: function () { return alignBlocks(alignCenterRules); },
    alignRight: function () { return alignBlocks(alignRightRules); },
    alignJustify: function () { return alignBlocks(alignRemoveRules); },
    indent: function () { return indent; },
    outdent: function () { return outdent; },
    // think about changing the command name.
    insertOrderedList: function () { return toggleOrderedList; },
    // think about changing the command name.
    insertUnorderedList: function () { return toggleUnorderedList; },
    getHTML: function () { return getHTML; },
    setHTML: function (content) { return setHTML(content); },
    undo: function () { return undo; },
    redo: function () { return redo; },
    insertImage: function (attrs) { return insertImage(attrs); }
};
/**
 * @hidden
 */
var editorCommands = Object.assign({}, inlineCommand, blockCommand);

/**
 * @hidden
 */
var LinkDialogComponent = /** @class */ (function (_super) {
    __extends(LinkDialogComponent, _super);
    function LinkDialogComponent(dialog) {
        var _this = _super.call(this, dialog) || this;
        _this.dialog = dialog;
        _this.data = { href: '', title: '', target: undefined };
        return _this;
    }
    LinkDialogComponent.prototype.onCancelAction = function () {
        this.dialog.close();
    };
    LinkDialogComponent.prototype.onConfirmAction = function () {
        this.editor.exec('createLink', this.getData());
        this.dialog.close();
        this.editor.focus();
    };
    LinkDialogComponent.prototype.setData = function (state) {
        var mark = getMark(state, schema.marks.link);
        if (mark) {
            this.data = {
                href: mark.attrs.href,
                title: mark.attrs.title,
                target: mark.attrs.target
            };
        }
    };
    LinkDialogComponent.prototype.getData = function () {
        return {
            href: this.href.nativeElement.value || undefined,
            title: this.title.nativeElement.value || undefined,
            target: this.target.nativeElement.checked ? '_blank' : undefined
        };
    };
    LinkDialogComponent.decorators = [
        { type: Component, args: [{
                    template: "\n        <kendo-dialog-titlebar>\n            Insert Link\n        </kendo-dialog-titlebar>\n        <div class=\"k-editor-dialog\">\n            <div class=\"k-editor-dialog k-popup-edit-form k-window-content k-content\" >\n                <div class=\"k-edit-form-container k-window-content\">\n                    <div class=\"k-edit-label\">\n                        <label for=\"k-editor-link-url\">Web address</label>\n                    </div>\n                    <div class=\"k-edit-field\">\n                        <input #href [value]=\"data.href\" type=\"text\" class=\"k-input k-textbox\">\n                    </div>\n                    <div class=\"k-edit-label k-editor-link-text-row\">\n                        <label for=\"k-editor-link-text\">Title</label>\n                    </div>\n                    <div class=\"k-edit-field k-editor-link-text-row\">\n                        <input #title [value]=\"data.title\" type=\"text\" class=\"k-input k-textbox\">\n                    </div>\n                    <div class=\"k-edit-field\">\n                        <input #target type=\"checkbox\" class=\"k-checkbox\">\n                        <label for=\"k-editor-link-target\" class=\"k-checkbox-label\">Open link in new window</label>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <kendo-dialog-actions>\n            <button kendoButton (click)=\"onCancelAction()\">Cancel</button>\n            <button kendoButton (click)=\"onConfirmAction()\" [primary]=\"true\">Insert</button>\n        </kendo-dialog-actions>\n    "
                },] },
    ];
    /** @nocollapse */
    LinkDialogComponent.ctorParameters = function () { return [
        { type: DialogRef, },
    ]; };
    LinkDialogComponent.propDecorators = {
        'editor': [{ type: Input },],
        'href': [{ type: ViewChild, args: ['href',] },],
        'title': [{ type: ViewChild, args: ['title',] },],
        'target': [{ type: ViewChild, args: ['target',] },],
    };
    return LinkDialogComponent;
}(DialogContentBase));

// import { EditorService } from '../editor.service';
/**
 * @hidden
 */
var SourceDialogComponent = /** @class */ (function (_super) {
    __extends(SourceDialogComponent, _super);
    function SourceDialogComponent(dialog) {
        var _this = _super.call(this, dialog) || this;
        _this.dialog = dialog;
        _this.data = '';
        return _this;
    }
    SourceDialogComponent.prototype.onCancelAction = function () {
        this.dialog.close();
    };
    SourceDialogComponent.prototype.onConfirmAction = function () {
        this.editor.exec('setHTML', this.getData());
        this.dialog.close();
        this.editor.focus();
    };
    SourceDialogComponent.prototype.getData = function () {
        return this.textarea.nativeElement.value;
    };
    SourceDialogComponent.prototype.setData = function () {
        this.data = this.indent(this.editor.getSource());
    };
    SourceDialogComponent.prototype.indent = function (content) {
        return content.replace(/<\/(p|li|ul|ol|h[1-6]|table|tr|td|th)>/ig, "</$1>\n")
            .replace(/<(ul|ol)([^>]*)><li/ig, "<$1$2>\n<li")
            .replace(/<br \/>/ig, "<br />\n")
            .replace(/\n$/, "");
    };
    SourceDialogComponent.decorators = [
        { type: Component, args: [{
                    template: "\n        <kendo-dialog-titlebar>\n            View Source\n        </kendo-dialog-titlebar>\n        <textarea [value]=\"data\" #textarea class=\"k-editor-textarea k-input\"></textarea>\n        <kendo-dialog-actions>\n            <button kendoButton (click)=\"onCancelAction()\">Cancel</button>\n            <button kendoButton (click)=\"onConfirmAction()\" [primary]=\"true\">Update</button>\n        </kendo-dialog-actions>\n    ",
                    styles: ["\n        >>> .k-editor-textarea {\n            height: 100%;\n        }\n    "]
                },] },
    ];
    /** @nocollapse */
    SourceDialogComponent.ctorParameters = function () { return [
        { type: DialogRef, },
    ]; };
    SourceDialogComponent.propDecorators = {
        'editor': [{ type: Input },],
        'textarea': [{ type: ViewChild, args: ['textarea',] },],
    };
    return SourceDialogComponent;
}(DialogContentBase));

/**
 * @hidden
 */
var ImageDialogComponent = /** @class */ (function (_super) {
    __extends(ImageDialogComponent, _super);
    function ImageDialogComponent(dialog) {
        var _this = _super.call(this, dialog) || this;
        _this.dialog = dialog;
        _this.data = {
            src: '',
            alt: '',
            width: '',
            height: ''
        };
        _this.src = new FormControl('', Validators.required);
        _this.alt = new FormControl('');
        _this.width = new FormControl('', Validators.min(1));
        _this.height = new FormControl('', Validators.min(1));
        _this.imageData = new FormGroup({
            src: _this.src,
            alt: _this.alt,
            width: _this.width,
            height: _this.height
        });
        return _this;
    }
    ImageDialogComponent.prototype.onCancelAction = function () {
        this.dialog.close();
    };
    ImageDialogComponent.prototype.onConfirmAction = function () {
        if (this.src.value) {
            this.editor.exec('insertImage', this.getData());
            this.dialog.close();
            this.editor.focus();
        }
    };
    ImageDialogComponent.prototype.setData = function (state) {
        var node = getNodeFromSelection(state);
        if (node) {
            this.src.patchValue(node.attrs.src);
            this.alt.patchValue(node.attrs.alt);
            this.width.patchValue(node.attrs.width);
            this.height.patchValue(node.attrs.height);
        }
    };
    ImageDialogComponent.prototype.getData = function () {
        return {
            src: this.src.value,
            alt: this.alt.value,
            width: this.normalizeDimension(this.width.value),
            height: this.normalizeDimension(this.height.value)
        };
    };
    ImageDialogComponent.prototype.normalizeDimension = function (value) {
        return Number.isNaN(parseInt(value, 10)) || parseInt(value, 10) <= 0 ? '' : safeString(parseInt(value, 10));
    };
    ImageDialogComponent.decorators = [
        { type: Component, args: [{
                    template: "\n        <kendo-dialog-titlebar>\n            Insert Image\n        </kendo-dialog-titlebar>\n        <div class=\"k-editor-dialog\">\n            <div class=\"k-editor-dialog k-popup-edit-form k-window-content k-content\" >\n                <div class=\"k-edit-form-container k-window-content\">\n                    <div class=\"k-edit-label\">\n                        <label for=\"k-editor-image-url\">Web address</label>\n                    </div>\n                    <div class=\"k-edit-field\">\n                        <input [formControl]=\"src\" type=\"text\" class=\"k-input k-textbox\">\n                    </div>\n                    <div class=\"k-edit-label\">\n                        <label for=\"k-editor-image-text\">Alternate text</label>\n                    </div>\n                    <div class=\"k-edit-field\">\n                        <input [formControl]=\"alt\" type=\"text\" class=\"k-input k-textbox\">\n                    </div>\n                    <div class=\"k-edit-label\">\n                        <label for=\"k-editor-image-width\">Width (px)</label>\n                    </div>\n                    <div class=\"k-edit-field\">\n                        <input [formControl]=\"width\" type=\"text\" class=\"k-input k-textbox\">\n                    </div>\n                    <div class=\"k-edit-label\">\n                        <label for=\"k-editor-image-height\">Height (px)</label>\n                    </div>\n                    <div class=\"k-edit-field\">\n                        <input [formControl]=\"height\" type=\"text\" class=\"k-input k-textbox\">\n                    </div>\n                </div>\n            </div>\n        </div>\n        <kendo-dialog-actions>\n            <button kendoButton (click)=\"onCancelAction()\">Cancel</button>\n            <button kendoButton [disabled]=\"imageData.invalid\" (click)=\"onConfirmAction()\" [primary]=\"true\">Insert</button>\n        </kendo-dialog-actions>\n    "
                },] },
    ];
    /** @nocollapse */
    ImageDialogComponent.ctorParameters = function () { return [
        { type: DialogRef, },
    ]; };
    ImageDialogComponent.propDecorators = {
        'editor': [{ type: Input },],
    };
    return ImageDialogComponent;
}(DialogContentBase));

function updateToolBar(_a) {
    var state = _a.state;
    return {
        //marks
        bold: isMarkActive(state, schema.marks.strong),
        italic: isMarkActive(state, schema.marks.em),
        underline: isMarkActive(state, schema.marks.underline),
        strikethrough: isMarkActive(state, schema.marks.strikethrough),
        link: isMarkActive(state, schema.marks.link),
        subscript: isMarkActive(state, schema.marks.subscript),
        superscript: isMarkActive(state, schema.marks.superscript),
        //nodes
        format: activeNodeName(state),
        insertOrderedList: isInListOfType(state, schema.nodes.orderedList),
        insertUnorderedList: isInListOfType(state, schema.nodes.bulletList),
        indent: canIndent(state, schema.nodes.listItem),
        outdent: canOutdent(state, schema.nodes.listItem),
        alignLeft: isAligned(state, alignLeftRules),
        alignCenter: isAligned(state, alignCenterRules),
        alignRight: isAligned(state, alignRightRules),
        alignJustify: isAligned(state, alignRemoveRules),
        //history
        undo: !undo(state),
        redo: !redo(state),
        //selection
        noSelection: state.selection.empty
    };
}
var editorDialogs = {
    createLink: {
        content: LinkDialogComponent
    },
    viewSource: {
        content: SourceDialogComponent,
        width: 500,
        height: 400
    },
    insertImage: {
        content: ImageDialogComponent
    }
};
var EMPTY_PARAGRAPH = '<p></p>';
/**
 * Represents the [Kendo UI Editor component for Angular]({% slug overview_editor %}).
 */
var EditorComponent = /** @class */ (function () {
    function EditorComponent(element, dialogService) {
        this.element = element;
        this.dialogService = dialogService;
        /**
         * Fires each time the value of the Editor is changed upon user interaction&mdash;
         * for example, when the component is blurred or the value is updated through the `viewSource` dialog.
         * When the value of the Editor is programmatically changed through its API (`ngModel`) or form binding (`formControl`),
         * the `valueChange` event is not triggered because it might cause a mix-up with the
         * built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.
         */
        this.valueChange = new EventEmitter();
        /**
         * @hidden
         */
        this.stateChange = new EventEmitter();
        this.onChangeCallback = function (_) { }; // tslint:disable-line:no-empty
        this.onTouchedCallback = function (_) { }; // tslint:disable-line:no-empty
    }
    Object.defineProperty(EditorComponent.prototype, "value", {
        get: function () {
            var value = this.view ? this.getSource() : this._value;
            if (value === EMPTY_PARAGRAPH) {
                return this._value ? '' : this._value;
            }
            else {
                return value;
            }
        },
        /**
         * Sets the value of the Editor ([see example]({% slug overview_editor %}#toc-basic-usage)).
         */
        set: function (value) {
            this._value = value;
            this._previousValue = value;
            if (this.view) {
                this.exec('setHTML', this._value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorComponent.prototype, "className", {
        get: function () {
            return 'k-widget k-editor';
        },
        enumerable: true,
        configurable: true
    });
    EditorComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var that = this;
        var containerNativeElement = this.container.element.nativeElement;
        var contentNode = createContentNode(this.value);
        var state = EditorState.create({
            schema: schema,
            doc: contentNode,
            plugins: [
                history(),
                keymap(buildKeymap(schema)),
                keymap({
                    'Mod-z': undo,
                    'Mod-y': redo
                }),
                keymap(baseKeymap)
            ]
        });
        this.view = new EditorView(containerNativeElement, {
            state: state,
            dispatchTransaction: function (tr) {
                // `this` is bound to the view instance.
                this.updateState(this.state.apply(tr));
                that.stateChange.emit(updateToolBar(this));
                // When the user utilizes keyboard shortcuts&mdash;for example, `Ctrl`+`b`&mdash;
                // `tr.docChanged` is `true` and the toolbar is not updated.
                // A possible future solution is to move the keymaps to the service.
                // if (!tr.docChanged) {
                //     that.stateChange.emit(updateToolBar(that.view));
                // }
            }
        });
        this.subs = fromEvent$1(this.container.element.nativeElement, 'keyup').pipe(map$1(function (e) { return e.keyCode; }), filter$1(function (code) { return code === 121; }), // F10
        map$1(function () { return _this.userToolBar || _this.defaultToolbar; }))
            .subscribe(function (toolbar) { return toolbar.nativeElement.focus(); });
        var blur$ = fromEvent$1(this.element.nativeElement, 'focusout').pipe(filter$1(function (event) { return !_this.element.nativeElement.contains(event.relatedTarget); }));
        this.subs.add(
        //on blur & new value
        blur$.pipe(map$1(function () { return _this.value; }), filter$1(function (value) { return !hasSameMarkup(value, that._previousValue); }))
            .subscribe(function (value) {
            _this._previousValue = value;
            _this.onChangeCallback(value);
            _this.valueChange.emit(value);
        }));
        this.subs.add(
        //on every blur
        blur$.subscribe(function () { return _this.onTouchedCallback(); }));
    };
    /**
     * Executes a command on the currently selected text.
     *
     * @param {EditorCommand} commandName - The command that will be executed.
     * @param {any} attr - Optional parameters for the command. Apart from the following list, the parameters do not expect specific attributes when you call them:
     * - `format` - Accepts an object with the `tag` property.
     * The supported tags are `p`, `blockquote`, and any of the `h1` to `h6` heading tags.
     * - `createLink` - Accepts an object with the `href`, `title`, and `target` properties. The `href` property is mandatory.
     * - `setHTML` - Accepts a `string` parameter.
     *
     * @example
     * ```ts-no-run
     * // Toggles the bold styling.
     * editor.exec('bold');
     *
     * // Creates a bullet list.
     * editor.exec('insertUnorderedList');
     *
     * // Creates a link.
     * editor.exec('createLink', { href: 'www.progress.com', title: 'Progress', target: 'window' });
     *
     * // Changes the format of a text block.
     * editor.exec('format', { tag: 'h2' });
     *
     * // Changes the content of the Editor.
     * editor.exec('setHTML', '<p>HTML content</p>');
     * ```
     */
    EditorComponent.prototype.exec = function (commandName, attr) {
        // Finds a command and applies the attributes.
        var command = editorCommands[commandName](attr);
        // Executes a ProseMirror command.
        command(this.view.state, this.view.dispatch, this.view);
        // See the `dispatchTransaction` comments.
        // this.stateChange.emit(updateToolBar(this.view));
    };
    /**
     * Opens a dialog.
     * @param {DialogCommand} dialogName - The name of the dialog that will open.
     *
     * The supported values are:
     * * `createLink`
     * * `viewSource`
     *
     * @example
     * ```ts-no-run
     * // Opens a `createLink` dialog.
     * editor.openDialog('createLink');
     *
     * // Opens a `viewSource` dialog.
     * editor.exec('viewSource');
     * ```
     */
    EditorComponent.prototype.openDialog = function (dialogName) {
        var dialog = editorDialogs[dialogName];
        var dialogRef = this.dialogService.open(dialog);
        dialogRef.content.instance.editor = this;
        dialogRef.content.instance.setData(this.view.state);
    };
    /**
     * Manually focus the Editor.
     */
    EditorComponent.prototype.focus = function () {
        this.view.focus();
    };
    /**
     * Manually blur the Editor.
     */
    EditorComponent.prototype.blur = function () {
        this.view.dom.blur();
    };
    /**
     * @hidden
     */
    EditorComponent.prototype.getSource = function () {
        return getHTML(this.view.state);
    };
    EditorComponent.prototype.ngOnDestroy = function () {
        this.subs.unsubscribe();
    };
    /**
     * @hidden
     */
    EditorComponent.prototype.writeValue = function (value) {
        // To avoid confusion, non-existent values are always undefined.
        this.value = value === null ? undefined : value;
    };
    /**
     * @hidden
     */
    EditorComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @hidden
     */
    EditorComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    EditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'kendo-editor',
                    providers: [
                        DialogService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return EditorComponent; }),
                            multi: true
                        }
                    ],
                    template: "\n        <ng-content select=\"kendo-toolbar\"></ng-content>\n        <kendo-toolbar *ngIf=\"!userToolBar\" #defaultToolbar>\n            <kendo-toolbar-buttongroup>\n                <kendo-toolbar-button kendoEditorButton=\"bold\"></kendo-toolbar-button>\n                <kendo-toolbar-button kendoEditorButton=\"italic\"></kendo-toolbar-button>\n                <kendo-toolbar-button kendoEditorButton=\"underline\"></kendo-toolbar-button>\n            </kendo-toolbar-buttongroup>\n            <kendo-toolbar-dropdownlist kendoEditorDropDown=\"format\"></kendo-toolbar-dropdownlist>\n            <kendo-toolbar-buttongroup>\n                <kendo-toolbar-button kendoEditorButton=\"insertUnorderedList\"></kendo-toolbar-button>\n                <kendo-toolbar-button kendoEditorButton=\"insertOrderedList\"></kendo-toolbar-button>\n            </kendo-toolbar-buttongroup>\n            <!-- <kendo-toolbar-dialog kendoEditorCommand=\"createLink\"></kendo-toolbar-dialog> -->\n        </kendo-toolbar>\n        <div #content class=\"k-content\" style=\"height: 300px;\"></div>\n        <div kendoDialogContainer></div>\n    ",
                    styles: ["\n        >>> .k-content > .ProseMirror {\n            height: 100%;\n            width: 100%;\n            box-sizing: border-box;\n            outline: none;\n            overflow: scroll;\n        }\n    "]
                },] },
    ];
    /** @nocollapse */
    EditorComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: DialogService, },
    ]; };
    EditorComponent.propDecorators = {
        'value': [{ type: Input },],
        'valueChange': [{ type: Output },],
        'className': [{ type: HostBinding, args: ['class',] },],
        'userToolBar': [{ type: ContentChild, args: [ToolBarComponent, { read: ElementRef },] },],
        'container': [{ type: ViewChild, args: ['content', { read: ViewContainerRef },] },],
        'defaultToolbar': [{ type: ViewChild, args: ['defaultToolbar', { read: ElementRef },] },],
    };
    return EditorComponent;
}());

/**
 * @hidden
 */
var ToolBarDropDownListComponent = /** @class */ (function (_super) {
    __extends(ToolBarDropDownListComponent, _super);
    function ToolBarDropDownListComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.valueChange = new EventEmitter();
        return _this;
    }
    Object.defineProperty(ToolBarDropDownListComponent.prototype, "outerWidth", {
        get: function () {
            if (this.element) {
                return outerWidth(this.element.nativeElement);
            }
        },
        enumerable: true,
        configurable: true
    });
    ToolBarDropDownListComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:no-forward-ref
                    providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(function () { return ToolBarDropDownListComponent; }) }],
                    selector: 'kendo-toolbar-dropdownlist',
                    template: "\n        <ng-template #toolbarTemplate>\n            <kendo-dropdownlist #element\n                [defaultItem]=\"defaultItem\"\n                [textField]=\"textField\"\n                [valueField]=\"valueField\"\n                [data]=\"data\"\n                [value]=\"value\"\n                [valuePrimitive]=\"valuePrimitive\"\n                [itemDisabled]=\"itemDisabled\"\n                (valueChange)=\"valueChange.emit($event)\"\n            >\n            </kendo-dropdownlist>\n        </ng-template>\n    "
                },] },
    ];
    /** @nocollapse */
    ToolBarDropDownListComponent.ctorParameters = function () { return []; };
    ToolBarDropDownListComponent.propDecorators = {
        'textField': [{ type: Input },],
        'valueField': [{ type: Input },],
        'valuePrimitive': [{ type: Input },],
        'value': [{ type: Input },],
        'data': [{ type: Input },],
        'defaultItem': [{ type: Input },],
        'itemDisabled': [{ type: Input },],
        'valueChange': [{ type: Output },],
        'toolbarTemplate': [{ type: ViewChild, args: ['toolbarTemplate',] },],
        'element': [{ type: ViewChild, args: ['element',] },],
    };
    return ToolBarDropDownListComponent;
}(ToolBarToolComponent));

/**
 * @hidden
 */
var commandIcons = {
    bold: 'bold',
    italic: 'italic',
    underline: 'underline',
    strikethrough: 'strikethrough',
    createLink: 'link-horizontal',
    unlink: 'unlink-horizontal',
    insertOrderedList: 'list-ordered',
    insertUnorderedList: 'list-unordered',
    indent: 'indent-increase',
    outdent: 'indent-decrease',
    alignLeft: 'align-left',
    alignCenter: 'align-center',
    alignRight: 'align-right',
    alignJustify: 'align-justify',
    viewSource: 'html',
    undo: 'undo',
    redo: 'redo',
    insertImage: 'image',
    subscript: 'sub-script',
    superscript: 'sup-script'
};

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)). According to the command that
 * is passed to it, `kendoEditorButton` predefines the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` or `disabled` state of the button while the user is editing.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorButton="bold"></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorButton="bold" icon="blogger"></kendo-toolbar-button>
 * ```
 */
var EditorButtonDirective = /** @class */ (function () {
    function EditorButtonDirective(button, editor) {
        this.button = button;
        this.editor = editor;
    }
    EditorButtonDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.button.icon) {
            this.button.icon = commandIcons[this.command];
        }
        this.subs = this.button.click.subscribe(function () {
            _this.editor.exec(_this.command);
            _this.editor.focus();
        });
        this.subs.add(this.editor.stateChange.subscribe(function (state) {
            if (_this.command === 'indent' || _this.command === 'outdent') {
                _this.button.disabled = !state[_this.command];
            }
            else if (_this.command === 'unlink') {
                _this.button.disabled = !state.link;
            }
            else if (_this.command === 'undo' || _this.command === 'redo') {
                _this.button.disabled = state[_this.command];
            }
            else {
                _this.button.selected = state[_this.command];
            }
        }));
    };
    EditorButtonDirective.prototype.ngOnDestroy = function () {
        this.subs.unsubscribe();
    };
    EditorButtonDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'kendo-toolbar-button[kendoEditorButton]'
                },] },
    ];
    /** @nocollapse */
    EditorButtonDirective.ctorParameters = function () { return [
        { type: ToolBarButtonComponent, },
        { type: EditorComponent, decorators: [{ type: Host },] },
    ]; };
    EditorButtonDirective.propDecorators = {
        'command': [{ type: Input, args: ['kendoEditorButton',] },],
    };
    return EditorButtonDirective;
}());

/**
 * A directive which configures an existing `ToolBarDropDownComponent` as an Editor format tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)). `kendoEditorDropDown` predefines
 * the `defaultItem`, `data`, and `valueChange` event handlers. In addition,
 * the directive updates the selected item while the user is editing.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-dropdownlist kendoEditorDropDown="format"></kendo-toolbar-dropdownlist>
 * ```
 */
var EditorDropDownDirective = /** @class */ (function () {
    function EditorDropDownDirective(dropdownlist, editor) {
        this.dropdownlist = dropdownlist;
        this.editor = editor;
        /**
         * Defines the built-in drop-down list that will be opened. Can be of the `DialogCommand` type.
         * The supported value is `format`.
         */
        this.command = 'format'; // tslint:disable-line:no-input-rename
    }
    EditorDropDownDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.dropdownlist.textField = 'text';
        this.dropdownlist.valueField = 'tag';
        this.dropdownlist.valuePrimitive = true;
        this.dropdownlist.itemDisabled = function (itemArgs) {
            return itemArgs.dataItem.tag === '';
        };
        this.dropdownlist.data = [
            { text: 'Paragraph', tag: 'p' },
            { text: 'Quotation', tag: 'blockquote' },
            { text: 'Heading 1', tag: 'h1' },
            { text: 'Heading 2', tag: 'h2' },
            { text: 'Heading 3', tag: 'h3' },
            { text: 'Heading 4', tag: 'h4' },
            { text: 'Heading 5', tag: 'h5' },
            { text: 'Heading 6', tag: 'h6' }
        ];
        //TODO: style headings via template
        this.dropdownlist.defaultItem = { text: 'Format', tag: '' };
        this.dropdownlist.valueChange.subscribe(function (value) {
            _this.editor.exec('format', { tag: value });
            _this.editor.focus();
        });
        this.editor.stateChange.subscribe(function (_a) {
            var format = _a.format;
            var index = _this.dropdownlist.data.findIndex(function (item) { return item.tag === format.tag; });
            _this.dropdownlist.value = (index !== -1) ? format.tag : '';
        });
    };
    EditorDropDownDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'kendo-toolbar-dropdownlist[kendoEditorDropDown]'
                },] },
    ];
    /** @nocollapse */
    EditorDropDownDirective.ctorParameters = function () { return [
        { type: ToolBarDropDownListComponent, },
        { type: EditorComponent, decorators: [{ type: Host },] },
    ]; };
    EditorDropDownDirective.propDecorators = {
        'command': [{ type: Input, args: ['kendoEditorDropDown',] },],
    };
    return EditorDropDownDirective;
}());

/**
 * @hidden
 */
var ToolBarComboBoxComponent = /** @class */ (function (_super) {
    __extends(ToolBarComboBoxComponent, _super);
    function ToolBarComboBoxComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.valueChange = new EventEmitter();
        return _this;
    }
    Object.defineProperty(ToolBarComboBoxComponent.prototype, "outerWidth", {
        get: function () {
            if (this.element) {
                return outerWidth(this.element.nativeElement);
            }
        },
        enumerable: true,
        configurable: true
    });
    ToolBarComboBoxComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:no-forward-ref
                    providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(function () { return ToolBarComboBoxComponent; }) }],
                    selector: 'kendo-toolbar-combobox',
                    template: "\n        <ng-template #toolbarTemplate>\n            <kendo-combobox #element\n                [placeholder]=\"placeholder\"\n                [textField]=\"textField\"\n                [valueField]=\"valueField\"\n                [data]=\"data\"\n                [value]=\"value\"\n                (valueChange)=\"valueChange.emit($event)\"\n            >\n            </kendo-combobox>\n        </ng-template>\n    "
                },] },
    ];
    /** @nocollapse */
    ToolBarComboBoxComponent.ctorParameters = function () { return []; };
    ToolBarComboBoxComponent.propDecorators = {
        'textField': [{ type: Input },],
        'valueField': [{ type: Input },],
        'data': [{ type: Input },],
        'value': [{ type: Input },],
        'placeholder': [{ type: Input },],
        'valueChange': [{ type: Output },],
        'toolbarTemplate': [{ type: ViewChild, args: ['toolbarTemplate',] },],
        'element': [{ type: ViewChild, args: ['element',] },],
    };
    return ToolBarComboBoxComponent;
}(ToolBarToolComponent));

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)). `kendoEditorDialog` predefines
 * the `icon` and the dialog type that will be open on `click`. In addition,
 * the directive updates the `selected` or `disabled` state of the button while the user is editing.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorDialog="viewSource"></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorDialog="viewSource" icon="blogger"></kendo-toolbar-button>
 * ```
 */
var EditorDialogDirective = /** @class */ (function () {
    function EditorDialogDirective(button, editor) {
        this.button = button;
        this.editor = editor;
    }
    EditorDialogDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.button.icon) {
            this.button.icon = commandIcons[this.command];
        }
        this.subs = this.button.click.subscribe(function () {
            _this.editor.openDialog(_this.command);
        });
        this.subs.add(this.editor.stateChange.subscribe(function (state) {
            if (_this.command === 'createLink') {
                _this.button.disabled = state.link ? false : state.noSelection;
            }
        }));
    };
    EditorDialogDirective.prototype.ngOnDestroy = function () {
        this.subs.unsubscribe();
    };
    EditorDialogDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'kendo-toolbar-button[kendoEditorDialog]'
                },] },
    ];
    /** @nocollapse */
    EditorDialogDirective.ctorParameters = function () { return [
        { type: ToolBarButtonComponent, },
        { type: EditorComponent, decorators: [{ type: Host },] },
    ]; };
    EditorDialogDirective.propDecorators = {
        'command': [{ type: Input, args: ['kendoEditorDialog',] },],
    };
    return EditorDialogDirective;
}());

var COMPONENT_DIRECTIVES = [
    EditorButtonDirective,
    EditorDropDownDirective,
    EditorDialogDirective
];
var TOOLBAR_TOOLS = [
    ToolBarDropDownListComponent,
    ToolBarComboBoxComponent
];
var TOOLBAR_DIALOGS = [
    LinkDialogComponent,
    SourceDialogComponent,
    ImageDialogComponent
];
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }}) definition for the Editor component.
 *
 * The package exports:
 * - `EditorComponent`&mdash;The `EditorComponent` class.
 * - `EditorButtonDirective`&mdash;The `EditorButton` directive class.
 * - `EditorDropDownDirective`&mdash;The `EditorDropDown` directive class.
 * - `EditorDialogDirective`&mdash;The `EditorDialog` directive class.
 * - `ToolBarDropDownListComponent`&mdash;The `ToolBarDropDownListComponent` directive class.
 * - `ButtonModule`&mdash;The `KendoButton` module.
 * - `ToolBarModule`&mdash;The `KendoToolBar` module.
 *
 *  * @example
 *
 * ```ts-no-run
 * // Import the Editor module
 * import { EditorModule } from '@progress/kendo-angular-editor';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare the app component
 *     imports:      [BrowserModule, EditorModule], // import the Editor module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var EditorModule = /** @class */ (function () {
    function EditorModule() {
    }
    EditorModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        EditorComponent,
                        COMPONENT_DIRECTIVES,
                        TOOLBAR_TOOLS,
                        TOOLBAR_DIALOGS
                    ],
                    exports: [
                        EditorComponent,
                        COMPONENT_DIRECTIVES,
                        TOOLBAR_TOOLS,
                        ToolBarModule,
                        ButtonModule,
                        FormsModule,
                        ReactiveFormsModule
                    ],
                    imports: [
                        CommonModule,
                        ToolBarModule,
                        DropDownsModule,
                        DialogModule,
                        ButtonModule,
                        FormsModule,
                        ReactiveFormsModule
                    ],
                    entryComponents: [
                        TOOLBAR_DIALOGS
                    ]
                },] },
    ];
    /** @nocollapse */
    EditorModule.ctorParameters = function () { return []; };
    return EditorModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { ImageDialogComponent as ɵh, LinkDialogComponent as ɵf, SourceDialogComponent as ɵg, EditorButtonDirective as ɵa, EditorDialogDirective as ɵd, EditorDropDownDirective as ɵb, ToolBarComboBoxComponent as ɵe, ToolBarDropDownListComponent as ɵc, EditorComponent, EditorModule };
