/**
 * @hidden
 */
export function outerWidth(element) {
    let width = element.offsetWidth;
    const style = getComputedStyle(element);
    width += (parseFloat(style.marginLeft) || 0 + parseFloat(style.marginRight) || 0);
    return width;
}
/**
 * @hidden
 */
export const serializeDOMAttrs = (el) => Array.from(el.attributes)
    .reduce((acc, curr) => Object.assign({}, acc, { [curr.name]: curr.value }), {});
/**
 * @hidden
 */
export const removeEntries = (obj, predicate) => Object.keys(obj)
    .filter(key => predicate(key))
    .reduce((acc, curr) => Object.assign(acc, { [curr]: obj[curr] }), {});
/**
 * @hidden
 */
export const removeEmptyEntries = (obj) => {
    const predicate = (key) => obj[key] !== null && obj[key] !== undefined && obj[key] !== '';
    return removeEntries(obj, predicate);
};
/**
 * @hidden
 */
export const isEmpty = (obj) => Object.keys(obj).length === 0;
/**
 * @hidden
 */
export const isNullOrUndefined = (value) => value === undefined || value === null;
/**
 * @hidden
 */
export const safeString = (value) => isNullOrUndefined(value) ? '' : value.toString();
/**
 * @hidden
 */
export const first = (arr) => arr[0];
/**
 * @hidden
 */
export const last = (arr) => arr[arr.length - 1];
/**
 * @hidden
 */
export const unique = (arr) => Array.from(new Set(arr));
