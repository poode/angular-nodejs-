import { ResolvedPos } from 'prosemirror-model';
import { EditorState, Transaction } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
/**
 * @hidden
 */
export declare const rootListDepth: (pos: any, nodes: any) => any;
/**
 * @hidden
 */
export declare const getListLiftTarget: (schema: any, resPos: any) => number;
/**
 * @hidden
 */
export declare function liftSelectionList(state: EditorState, tr: Transaction): Transaction;
/**
 * @hidden
 */
export declare const toggleList: (state: any, dispatch: (tr: any) => void, view: any, listType: "orderedList" | "bulletList") => boolean;
/**
 * @hidden
 */
export declare function toggleListCommand(listType: 'bulletList' | 'orderedList'): (state: EditorState, dispatch: (tr: Transaction) => void, view: EditorView) => any;
/**
 * @hidden
 */
export declare function liftFollowingList(state: EditorState, from: number, to: number, rootListDepthNum: number, tr: Transaction): Transaction;
/**
 * @hidden
 */
export declare function isRangeOfType(doc: any, $from: ResolvedPos, $to: ResolvedPos, nodeType: any): boolean;
/**
 * @hidden
 */
export declare function getAncestorNodesBetween(doc: any, $from: ResolvedPos, $to: ResolvedPos): Node[];
/**
 * @hidden
 */
export declare function findAncestorPosition(doc: any, pos: any): any;
/**
 * @hidden
 */
export declare function liftListItems(): any;
/**
 * @hidden
 */
export declare function wrapInList(nodeType: any): any;
/**
 * @hidden
 */
export declare function toggleUnorderedList(state: EditorState, dispatch: (tr: Transaction) => void, view: EditorView): any;
/**
 * @hidden
 */
export declare function toggleOrderedList(state: EditorState, dispatch: (tr: Transaction) => void, view: EditorView): any;
