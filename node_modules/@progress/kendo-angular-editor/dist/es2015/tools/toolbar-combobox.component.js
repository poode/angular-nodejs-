import { Component, Input, ViewChild, forwardRef, Output, EventEmitter } from '@angular/core';
import { ToolBarToolComponent } from '@progress/kendo-angular-toolbar';
import { outerWidth } from '../util';
/**
 * @hidden
 */
export class ToolBarComboBoxComponent extends ToolBarToolComponent {
    constructor() {
        super(...arguments);
        this.valueChange = new EventEmitter();
    }
    get outerWidth() {
        if (this.element) {
            return outerWidth(this.element.nativeElement);
        }
    }
}
ToolBarComboBoxComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:no-forward-ref
                providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => ToolBarComboBoxComponent) }],
                selector: 'kendo-toolbar-combobox',
                template: `
        <ng-template #toolbarTemplate>
            <kendo-combobox #element
                [placeholder]="placeholder"
                [textField]="textField"
                [valueField]="valueField"
                [data]="data"
                [value]="value"
                (valueChange)="valueChange.emit($event)"
            >
            </kendo-combobox>
        </ng-template>
    `
            },] },
];
/** @nocollapse */
ToolBarComboBoxComponent.ctorParameters = () => [];
ToolBarComboBoxComponent.propDecorators = {
    'textField': [{ type: Input },],
    'valueField': [{ type: Input },],
    'data': [{ type: Input },],
    'value': [{ type: Input },],
    'placeholder': [{ type: Input },],
    'valueChange': [{ type: Output },],
    'toolbarTemplate': [{ type: ViewChild, args: ['toolbarTemplate',] },],
    'element': [{ type: ViewChild, args: ['element',] },],
};
