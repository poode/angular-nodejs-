import { AfterViewInit, ElementRef, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { DialogService } from '@progress/kendo-angular-dialog';
import { EditorCommand, DialogCommand } from './models/commands';
/**
 * Represents the [Kendo UI Editor component for Angular]({% slug overview_editor %}).
 */
export declare class EditorComponent implements AfterViewInit, ControlValueAccessor {
    private element;
    private dialogService;
    /**
     * Sets the value of the Editor ([see example]({% slug overview_editor %}#toc-basic-usage)).
     */
    value: string;
    /**
     * Fires each time the value of the Editor is changed upon user interaction&mdash;
     * for example, when the component is blurred or the value is updated through the `viewSource` dialog.
     * When the value of the Editor is programmatically changed through its API (`ngModel`) or form binding (`formControl`),
     * the `valueChange` event is not triggered because it might cause a mix-up with the
     * built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.
     */
    valueChange: EventEmitter<string>;
    readonly className: string;
    /**
     * @hidden
     */
    stateChange: EventEmitter<any>;
    userToolBar: ElementRef;
    private container;
    private defaultToolbar;
    private subs;
    private _value;
    private _previousValue;
    private view;
    constructor(element: ElementRef, dialogService: DialogService);
    ngAfterViewInit(): void;
    /**
     * Executes a command on the currently selected text.
     *
     * @param {EditorCommand} commandName - The command that will be executed.
     * @param {any} attr - Optional parameters for the command. Apart from the following list, the parameters do not expect specific attributes when you call them:
     * - `format` - Accepts an object with the `tag` property.
     * The supported tags are `p`, `blockquote`, and any of the `h1` to `h6` heading tags.
     * - `createLink` - Accepts an object with the `href`, `title`, and `target` properties. The `href` property is mandatory.
     * - `setHTML` - Accepts a `string` parameter.
     *
     * @example
     * ```ts-no-run
     * // Toggles the bold styling.
     * editor.exec('bold');
     *
     * // Creates a bullet list.
     * editor.exec('insertUnorderedList');
     *
     * // Creates a link.
     * editor.exec('createLink', { href: 'www.progress.com', title: 'Progress', target: 'window' });
     *
     * // Changes the format of a text block.
     * editor.exec('format', { tag: 'h2' });
     *
     * // Changes the content of the Editor.
     * editor.exec('setHTML', '<p>HTML content</p>');
     * ```
     */
    exec(commandName: EditorCommand, attr?: any): void;
    /**
     * Opens a dialog.
     * @param {DialogCommand} dialogName - The name of the dialog that will open.
     *
     * The supported values are:
     * * `createLink`
     * * `viewSource`
     *
     * @example
     * ```ts-no-run
     * // Opens a `createLink` dialog.
     * editor.openDialog('createLink');
     *
     * // Opens a `viewSource` dialog.
     * editor.exec('viewSource');
     * ```
     */
    openDialog(dialogName: DialogCommand): void;
    /**
     * Manually focus the Editor.
     */
    focus(): void;
    /**
     * Manually blur the Editor.
     */
    blur(): void;
    /**
     * @hidden
     */
    getSource(): string;
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    writeValue(value: any): void;
    /**
     * @hidden
     */
    registerOnChange(fn: Function): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: Function): void;
    private onChangeCallback;
    private onTouchedCallback;
}
