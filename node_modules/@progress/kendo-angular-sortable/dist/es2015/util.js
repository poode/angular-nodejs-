const NODE_NAME_PREDICATES = {};
const NODE_ATTR_PREDICATES = {};
/**
 * @hidden
 */
export const isDocumentAvailable = () => typeof document !== 'undefined';
/**
 * @hidden
 */
export const matchesNodeName = (nodeName) => {
    if (!NODE_NAME_PREDICATES[nodeName]) {
        NODE_NAME_PREDICATES[nodeName] = (element) => String(element.nodeName).toLowerCase() === nodeName.toLowerCase();
    }
    return NODE_NAME_PREDICATES[nodeName];
};
/**
 * @hidden
 */
export const matchesNodeAttr = (nodeAttr) => {
    if (!NODE_ATTR_PREDICATES[nodeAttr]) {
        NODE_ATTR_PREDICATES[nodeAttr] = (element) => element.hasAttribute ? element.hasAttribute(nodeAttr) : false;
    }
    return NODE_ATTR_PREDICATES[nodeAttr];
};
/**
 * @hidden
 */
export const closest = (node, predicate) => {
    while (node && !predicate(node)) {
        node = node.parentNode;
    }
    return node;
};
/**
 * Returns an object specifiying whether there is a DraggableDirective under the cursor.
 * @hidden
 */
export const draggableFromPoint = (x, y) => {
    if (!isDocumentAvailable()) {
        return;
    }
    let el = document.elementFromPoint(x, y);
    if (!el) {
        return;
    }
    const isDraggable = el.hasAttribute("kendoDraggable");
    const isChild = closest(el, matchesNodeAttr("kendoDraggable")) !== null;
    const parentDraggable = closest(el, matchesNodeAttr("kendoDraggable"));
    const index = parentDraggable ? parseInt(parentDraggable.getAttribute("data-sortable-index"), 10) : -1;
    return {
        element: el,
        index: index,
        isDraggable: isDraggable,
        isDraggableChild: isChild,
        parentDraggable: parentDraggable,
        rect: el.getBoundingClientRect()
    };
};
/**
 * Returns the DraggableDirective under the cursor.
 * @hidden
 */
export const draggableFromEvent = (event, sortable) => {
    let target;
    if (event.changedTouches) {
        const touch = event.changedTouches[0];
        target = draggableFromPoint(touch.clientX, touch.clientY);
    }
    else {
        target = draggableFromPoint(event.clientX, event.clientY);
    }
    // TODO: refactor sortable. Add draggable getter
    return sortable.draggables.toArray()[target ? target.index : -1];
};
