"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var NODE_NAME_PREDICATES = {};
var NODE_ATTR_PREDICATES = {};
/**
 * @hidden
 */
exports.isDocumentAvailable = function () { return typeof document !== 'undefined'; };
/**
 * @hidden
 */
exports.matchesNodeName = function (nodeName) {
    if (!NODE_NAME_PREDICATES[nodeName]) {
        NODE_NAME_PREDICATES[nodeName] = function (element) {
            return String(element.nodeName).toLowerCase() === nodeName.toLowerCase();
        };
    }
    return NODE_NAME_PREDICATES[nodeName];
};
/**
 * @hidden
 */
exports.matchesNodeAttr = function (nodeAttr) {
    if (!NODE_ATTR_PREDICATES[nodeAttr]) {
        NODE_ATTR_PREDICATES[nodeAttr] = function (element) {
            return element.hasAttribute ? element.hasAttribute(nodeAttr) : false;
        };
    }
    return NODE_ATTR_PREDICATES[nodeAttr];
};
/**
 * @hidden
 */
exports.closest = function (node, predicate) {
    while (node && !predicate(node)) {
        node = node.parentNode;
    }
    return node;
};
/**
 * Returns an object specifiying whether there is a DraggableDirective under the cursor.
 * @hidden
 */
exports.draggableFromPoint = function (x, y) {
    if (!exports.isDocumentAvailable()) {
        return;
    }
    var el = document.elementFromPoint(x, y);
    if (!el) {
        return;
    }
    var isDraggable = el.hasAttribute("kendoDraggable");
    var isChild = exports.closest(el, exports.matchesNodeAttr("kendoDraggable")) !== null;
    var parentDraggable = exports.closest(el, exports.matchesNodeAttr("kendoDraggable"));
    var index = parentDraggable ? parseInt(parentDraggable.getAttribute("data-sortable-index"), 10) : -1;
    return {
        element: el,
        index: index,
        isDraggable: isDraggable,
        isDraggableChild: isChild,
        parentDraggable: parentDraggable,
        rect: el.getBoundingClientRect()
    };
};
/**
 * Returns the DraggableDirective under the cursor.
 * @hidden
 */
exports.draggableFromEvent = function (event, sortable) {
    var target;
    if (event.changedTouches) {
        var touch = event.changedTouches[0];
        target = exports.draggableFromPoint(touch.clientX, touch.clientY);
    }
    else {
        target = exports.draggableFromPoint(event.clientX, event.clientY);
    }
    // TODO: refactor sortable. Add draggable getter
    return sortable.draggables.toArray()[target ? target.index : -1];
};
