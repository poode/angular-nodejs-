import { Injectable, ChangeDetectorRef } from '@angular/core';
import { DialogService, DialogCloseResult } from '@progress/kendo-angular-dialog';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { map } from 'rxjs/operators/map';
/**
 * @hidden
 */
export class DialogsService {
    constructor(dialogService, localization, changeDetector) {
        this.dialogService = dialogService;
        this.localization = localization;
        this.changeDetector = changeDetector;
    }
    openRemoveConfirmationDialog() {
        const dialog = this.dialogService.open({
            title: this.textFor('deleteDialogTitle'),
            content: this.textFor('deleteConfirmation'),
            actions: [
                { text: this.textFor('cancel'), value: false },
                { text: this.textFor('destroy'), value: true }
            ],
            appendTo: this.container
        });
        this.changeDetector.markForCheck();
        return dialog.result.pipe(map((result) => {
            if (result instanceof DialogCloseResult) {
                return false;
            }
            const res = result;
            return res.value;
        }));
    }
    openRecurringConfirmationDialog(operation) {
        const dialog = this.dialogService.open({
            actions: [
                {
                    text: operation === 0 /* Edit */ ? this.textFor('editOccurrence') : this.textFor('deleteOccurrence'),
                    value: 1 /* Occurrence */
                },
                {
                    text: operation === 0 /* Edit */ ? this.textFor('editSeries') : this.textFor('deleteSeries'),
                    value: 2 /* Series */
                }
            ],
            appendTo: this.container,
            content: operation === 0 /* Edit */ ? this.textFor('editRecurringConfirmation') : this.textFor('deleteRecurringConfirmation'),
            title: operation === 0 /* Edit */ ? this.textFor('editRecurringDialogTitle') : this.textFor('deleteRecurringDialogTitle')
        });
        this.changeDetector.markForCheck();
        return dialog.result.pipe(map((result) => {
            if (result instanceof DialogCloseResult) {
                return undefined;
            }
            const res = result;
            return res.value;
        }));
    }
    textFor(key) {
        return this.localization.get(key);
    }
}
DialogsService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
DialogsService.ctorParameters = () => [
    { type: DialogService, },
    { type: LocalizationService, },
    { type: ChangeDetectorRef, },
];
