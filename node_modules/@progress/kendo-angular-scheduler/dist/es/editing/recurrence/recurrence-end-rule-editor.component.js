import { Component, ViewChildren } from '@angular/core';
import { RecurrenceService } from './recurrence.service';
import { isPresent } from '../../common/util';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { EndRuleRadioButtonDirective } from './end-rule-radio-button.directive';
/**
 * @hidden
 */
var RecurrenceEndRuleEditorComponent = /** @class */ (function () {
    function RecurrenceEndRuleEditorComponent(recurrence, localization) {
        this.recurrence = recurrence;
        this.localization = localization;
        this.tempCount = 1;
        this.setInitialValues();
        this.subscribeChanges();
    }
    RecurrenceEndRuleEditorComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    };
    RecurrenceEndRuleEditorComponent.prototype.setEndRule = function (endRule) {
        if (endRule === 'count') {
            this.recurrence.rrule.count = this.tempCount;
        }
        else if (endRule === 'until') {
            this.recurrence.until = this.tempUntil;
        }
    };
    Object.defineProperty(RecurrenceEndRuleEditorComponent.prototype, "rrule", {
        get: function () {
            return this.recurrence.rrule;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecurrenceEndRuleEditorComponent.prototype, "countValue", {
        get: function () {
            return this.rrule.count || this.tempCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecurrenceEndRuleEditorComponent.prototype, "untilValue", {
        get: function () {
            var currentStart = this.recurrence.start;
            var currentUntil = this.recurrence.until;
            if (isPresent(currentUntil)) {
                return currentUntil;
            }
            else if (isPresent(this.tempUntil)) {
                return this.tempUntil;
            }
            else {
                return new Date(currentStart.getFullYear(), currentStart.getMonth(), currentStart.getDate(), 23, 59, 59);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecurrenceEndRuleEditorComponent.prototype, "untilMin", {
        get: function () {
            var currentStart = this.recurrence.start;
            var currentUntil = this.recurrence.until;
            if (isPresent(currentUntil) && currentUntil < currentStart) {
                return currentUntil;
            }
            else {
                return currentStart;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecurrenceEndRuleEditorComponent.prototype, "isCountDisabled", {
        get: function () {
            return this.recurrence.endRule !== 'count';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecurrenceEndRuleEditorComponent.prototype, "isUntilDisabled", {
        get: function () {
            return this.recurrence.endRule !== 'until';
        },
        enumerable: true,
        configurable: true
    });
    RecurrenceEndRuleEditorComponent.prototype.onCountChange = function (count) {
        this.recurrence.count = this.tempCount = count;
    };
    RecurrenceEndRuleEditorComponent.prototype.onUntilChange = function (until) {
        var newUntil = new Date(until.getFullYear(), until.getMonth(), until.getDate(), 23, 59, 59);
        this.recurrence.until = this.tempUntil = newUntil;
    };
    RecurrenceEndRuleEditorComponent.prototype.textFor = function (key) {
        return this.localization.get(key);
    };
    RecurrenceEndRuleEditorComponent.prototype.onEndLabelClick = function () {
        var selected = this.endRuleRadioButtons.toArray().find(function (r) { return r.elem.checked; });
        if (selected) {
            selected.elem.focus();
        }
    };
    RecurrenceEndRuleEditorComponent.prototype.setInitialValues = function () {
        this.tempCount = this.rrule.count || 1;
        this.tempUntil = this.untilValue;
    };
    RecurrenceEndRuleEditorComponent.prototype.subscribeChanges = function () {
        var _this = this;
        this.subscriptions = this.recurrence.endRuleChange.subscribe(function (endRule) {
            _this.setEndRule(endRule);
        });
        this.subscriptions.add(this.recurrence.frequencyChange.subscribe(function () {
            _this.setInitialValues();
        }));
    };
    RecurrenceEndRuleEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'kendo-recurrence-end-rule-editor',
                    template: "\n        <div class='k-edit-label'>\n            <label (click)=\"onEndLabelClick()\">{{ textFor('endLabel') }}</label>\n        </div>\n        <div class='k-edit-field'>\n            <ul class='k-reset'>\n                <li>\n                    <input [kendoRecurrenceEndRuleRadioButton]=\"'k-endrule-never'\" />\n                    <label class='k-radio-label' for='k-endrule-never'>{{ textFor('endNever') }}</label>\n                </li>\n                <li>\n                    <input [kendoRecurrenceEndRuleRadioButton]=\"'k-endrule-count'\" />\n                    <label class='k-radio-label' for='k-endrule-count'>{{ textFor('endAfter') }}</label>\n\n                    <kendo-numerictextbox\n                        [style.width.px]='70'\n                        [autoCorrect]='true'\n                        [decimals]='0'\n                        [disabled]='isCountDisabled'\n                        [format]=\"'#'\"\n                        [min]='1'\n                        [value]='countValue'\n                        (valueChange)='onCountChange($event)'>\n                    </kendo-numerictextbox>\n                    <span>{{ textFor('endOccurrence') }}</span>\n                </li>\n                <li>\n                    <input [kendoRecurrenceEndRuleRadioButton]=\"'k-endrule-until'\" />\n                    <label class='k-radio-label' for='k-endrule-until'>{{ textFor('endOn') }}</label>\n\n                    <kendo-datepicker\n                        [style.width.px]='150'\n                        [disabled]='isUntilDisabled'\n                        [min]='untilMin'\n                        [value]='untilValue'\n                        (valueChange)='onUntilChange($event)'>\n                    </kendo-datepicker>\n                </li>\n            </ul>\n        </div>\n    "
                },] },
    ];
    /** @nocollapse */
    RecurrenceEndRuleEditorComponent.ctorParameters = function () { return [
        { type: RecurrenceService, },
        { type: LocalizationService, },
    ]; };
    RecurrenceEndRuleEditorComponent.propDecorators = {
        'endRuleRadioButtons': [{ type: ViewChildren, args: [EndRuleRadioButtonDirective,] },],
    };
    return RecurrenceEndRuleEditorComponent;
}());
export { RecurrenceEndRuleEditorComponent };
