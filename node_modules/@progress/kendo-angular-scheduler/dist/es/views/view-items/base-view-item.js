import { Input, HostBinding } from '@angular/core';
import { anyChanged } from '../../common/changes';
import { isRecurrence, isRecurrenceException } from '../utils';
/**
 * @hidden
 */
var BaseViewItem = /** @class */ (function () {
    function BaseViewItem(slotService, localization, element, renderer) {
        this.slotService = slotService;
        this.localization = localization;
        this.element = element;
        this.renderer = renderer;
        this.className = true;
    }
    Object.defineProperty(BaseViewItem.prototype, "taskIndex", {
        get: function () {
            return this.item.index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseViewItem.prototype, "deleteMessage", {
        get: function () {
            return this.localization.get('deleteTitle');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseViewItem.prototype, "resizable", {
        get: function () {
            return this.editable && this.editable.resize !== false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseViewItem.prototype, "removable", {
        get: function () {
            return this.editable && this.editable.remove !== false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseViewItem.prototype, "resources", {
        get: function () {
            return this.item.resources[0].resources;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseViewItem.prototype, "isRecurrence", {
        get: function () {
            return isRecurrence(this.item);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseViewItem.prototype, "isRecurrenceException", {
        get: function () {
            return isRecurrenceException(this.item);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseViewItem.prototype, "nativeElement", {
        get: function () {
            if (this.element) {
                return this.element.nativeElement;
            }
        },
        enumerable: true,
        configurable: true
    });
    BaseViewItem.prototype.setStyles = function (styles) {
        var element = this.nativeElement;
        if (element) {
            for (var name_1 in styles) {
                if (styles.hasOwnProperty(name_1)) {
                    this.renderer.setStyle(element, name_1, styles[name_1]);
                }
            }
        }
    };
    BaseViewItem.prototype.toggle = function (visible) {
        this.setStyles({ display: visible ? 'block' : 'none' });
    };
    BaseViewItem.prototype.reflow = function () {
        var rect = this.rect;
        if (rect) {
            this.setStyles({
                left: !this.localization.rtl ? rect.left + "px" : '',
                right: this.localization.rtl ? rect.left + "px" : '',
                top: rect.top + "px",
                width: rect.width + "px",
                height: rect.height + "px",
                display: 'block'
            });
        }
    };
    BaseViewItem.prototype.ngOnInit = function () {
        var _this = this;
        if (this.dragHint) {
            return;
        }
        this.slotsChangeSubscription = this.slotService.slotsChange.subscribe(function () {
            _this.rect = null;
            _this.setStyles({
                display: 'none',
                width: 0,
                left: 0
            });
            _this.slotService.unregisterItem(_this, _this.resourceIndex, _this.index);
            _this.slotService.registerItem(_this);
        });
    };
    BaseViewItem.prototype.ngOnChanges = function (changes) {
        if (this.dragHint) {
            return;
        }
        if (anyChanged(['resourceIndex', 'index'], changes)) {
            var resourceIndex = changes.resourceIndex, index = changes.index;
            var previousResourceIndex = resourceIndex ? resourceIndex.previousValue : this.resourceIndex;
            var previousIndex = index ? index.previousValue : this.index;
            this.slotService.unregisterItem(this, previousResourceIndex, previousIndex);
            this.slotService.registerItem(this);
        }
    };
    BaseViewItem.prototype.ngOnDestroy = function () {
        if (this.dragHint) {
            return;
        }
        this.slotService.unregisterItem(this);
        if (this.slotsChangeSubscription) {
            this.slotsChangeSubscription.unsubscribe();
        }
    };
    BaseViewItem.propDecorators = {
        'item': [{ type: Input },],
        'resourceIndex': [{ type: Input },],
        'index': [{ type: Input },],
        'eventTemplate': [{ type: Input },],
        'editable': [{ type: Input },],
        'dragHint': [{ type: Input },],
        'className': [{ type: HostBinding, args: ['class.k-event',] },],
        'taskIndex': [{ type: HostBinding, args: ['attr.data-task-index',] },],
    };
    return BaseViewItem;
}());
export { BaseViewItem };
