"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
var edit_service_1 = require("./edit.service");
var util_1 = require("../common/util");
var resource_multiple_editor_component_1 = require("./resource-multiple-editor.component");
var resource_single_editor_component_1 = require("./resource-single-editor.component");
/**
 * @hidden
 */
var EditDialogComponent = /** @class */ (function () {
    function EditDialogComponent(ngZone, editService, localization, changeDetector) {
        var _this = this;
        this.ngZone = ngZone;
        this.editService = editService;
        this.localization = localization;
        this.changeDetector = changeDetector;
        this.resources = [];
        this.timezone = 'Etc/UTC';
        this.setTimeZone = false;
        this.setSeparateStartEndTimeZones = false;
        this.subs = this.editService.changed.subscribe(function () {
            _this.ngZone.run(function () { _this.onChange(); });
        });
    }
    Object.defineProperty(EditDialogComponent.prototype, "isEditingSeries", {
        get: function () {
            return this.editMode === 2 /* Series */ && Boolean(this.formGroup.get(this.fields.recurrenceRule));
        },
        enumerable: true,
        configurable: true
    });
    EditDialogComponent.prototype.onChange = function () {
        this.changeDetector.markForCheck();
        if (this.editService.hasNewEvent) {
            this.editMode = 2 /* Series */;
            this.formGroup = this.editService.context.formGroup;
            this.isNew = true;
            this.initialStart = this.formGroup.get(this.fields.start).value;
        }
        else if (this.editService.isEditing()) {
            var _a = this.editService.context, dataItem = _a.dataItem, mode = _a.mode;
            this.formGroup = this.editService.context.formGroup;
            this.isNew = false;
            this.editedEvent = dataItem;
            this.editMode = util_1.isPresent(mode) ? mode : 2 /* Series */;
        }
        else {
            this.reset();
            return;
        }
        if (!this.editTemplate) {
            this.addTimeZoneCheckboxesToFormGroup();
            this.subscribeToFormGroupChanges();
        }
        this.isActive = true;
    };
    EditDialogComponent.prototype.ngOnDestroy = function () {
        if (this.subs) {
            this.subs.unsubscribe();
        }
    };
    EditDialogComponent.prototype.onCancel = function (e) {
        e.preventDefault();
        this.onClose();
        this.changeDetector.markForCheck();
    };
    EditDialogComponent.prototype.onSave = function (e) {
        e.preventDefault();
        this.editService.save();
        this.changeDetector.markForCheck();
    };
    EditDialogComponent.prototype.onClose = function () {
        this.editService.endEdit();
        this.changeDetector.markForCheck();
    };
    Object.defineProperty(EditDialogComponent.prototype, "hasAllDay", {
        get: function () {
            return Boolean(this.formGroup.get(this.fields.isAllDay));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditDialogComponent.prototype, "hasStartTimeZone", {
        get: function () {
            return Boolean(this.formGroup.get(this.fields.startTimezone));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditDialogComponent.prototype, "isStartTimeZoneVisible", {
        get: function () {
            return this.formGroup && this.formGroup.get('startTimezoneCheckbox').value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditDialogComponent.prototype, "hasEndTimeZone", {
        get: function () {
            return Boolean(this.formGroup.get(this.fields.endTimezone));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditDialogComponent.prototype, "isEndTimeZoneVisible", {
        get: function () {
            return this.formGroup && this.formGroup.get('endTimezoneCheckbox').value;
        },
        enumerable: true,
        configurable: true
    });
    EditDialogComponent.prototype.getFormValue = function (field) {
        if (field) {
            return this.formGroup.get(field);
        }
    };
    EditDialogComponent.prototype.textFor = function (key) {
        return this.localization.get(key);
    };
    EditDialogComponent.prototype.onResourceClick = function (resource) {
        var resourceEditors = resource.multiple ? this.multipleResourceEditors : this.singleResourceEditors;
        var currentEditor = resourceEditors.filter(function (editor) { return editor.resource.field === resource.field; }).pop();
        if (currentEditor) {
            currentEditor.focus();
        }
    };
    EditDialogComponent.prototype.reset = function () {
        this.isActive = false;
        this.setTimeZone = false;
        this.setSeparateStartEndTimeZones = false;
        this.removeTimeZoneCheckboxesFromFormGroup();
    };
    EditDialogComponent.prototype.addTimeZoneCheckboxesToFormGroup = function () {
        if (util_1.isPresent(this.formGroup)) {
            var startField = this.fields.startTimezone;
            this.formGroup.addControl('startTimezoneCheckbox', new forms_1.FormControl(this.formGroup.contains(startField) &&
                this.formGroup.get(startField).value));
            var endField = this.fields.endTimezone;
            this.formGroup.addControl('endTimezoneCheckbox', new forms_1.FormControl(this.formGroup.contains(endField) &&
                this.formGroup.get(endField).value));
        }
    };
    EditDialogComponent.prototype.removeTimeZoneCheckboxesFromFormGroup = function () {
        if (util_1.isPresent(this.formGroup)) {
            this.formGroup.removeControl('startTimezoneCheckbox');
            this.formGroup.removeControl('endTimezoneCheckbox');
        }
    };
    EditDialogComponent.prototype.subscribeToFormGroupChanges = function () {
        var _this = this;
        if (util_1.isPresent(this.formGroup)) {
            var fields_1 = this.fields;
            this.formGroup.get('startTimezoneCheckbox').valueChanges.subscribe(function (isTrue) {
                if (!isTrue) {
                    _this.formGroup.get(fields_1.startTimezone).setValue(null, { emitEvent: false });
                    _this.formGroup.get(fields_1.endTimezone).setValue(null, { emitEvent: false });
                    _this.formGroup.get('endTimezoneCheckbox').setValue(false, { emitEvent: false });
                }
            });
            this.formGroup.get('endTimezoneCheckbox').valueChanges.subscribe(function (isTrue) {
                if (!isTrue) {
                    _this.formGroup.get(fields_1.endTimezone).setValue(null, { emitEvent: false });
                }
            });
        }
    };
    EditDialogComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'kendo-scheduler-edit-dialog',
                    template: "\n        <kendo-dialog (close)='onClose()' [minWidth]='700' *ngIf='isActive' title='{{ textFor(\"editorTitle\") }}' class='k-scheduler-edit-dialog'>\n            <ng-container *ngIf='!editTemplate'>\n                <div class='k-scheduler-edit-form'>\n                    <div class='k-edit-form-container'>\n                        <form novalidate [formGroup]='formGroup'>\n                            <div class='k-edit-label'>\n                                <label for='k-event-title'>{{ textFor('editorEventTitle') }}</label>\n                            </div>\n                            <div class='k-edit-field'>\n                                <input id='k-event-title' class='k-textbox' placeholder='Title' [formControl]='formGroup.get(fields.title)' />\n                            </div>\n\n                            <div class='k-edit-label'>\n                                <label (click)=\"startDateTimePicker.focus()\">{{ textFor('editorEventStart') }}</label>\n                            </div>\n                            <div class='k-edit-field'>\n                                <kendo-scheduler-datetime-picker #startDateTimePicker [formControl]='formGroup.get(fields.start)'\n                                    [isAllDay]='getFormValue(fields.isAllDay)?.value'>\n                                </kendo-scheduler-datetime-picker>\n                            </div>\n\n                            <ng-container *ngIf=\"isStartTimeZoneVisible\">\n                                <div class='k-edit-label'>\n                                    <label (click)=\"startTzPicker.focus()\">{{ textFor('editorEventStartTimeZone') }}</label>\n                                </div>\n\n                                <div class='k-edit-field'>\n                                    <kendo-timezone-editor #startTzPicker [formControl]='formGroup.get(fields.startTimezone)'></kendo-timezone-editor>\n                                </div>\n                            </ng-container>\n\n                            <div class='k-edit-label'>\n                                <label (click)=\"endDateTimePicker.focus()\">{{ textFor('editorEventEnd') }}</label>\n                            </div>\n                            <div class='k-edit-field'>\n                                <kendo-scheduler-datetime-picker #endDateTimePicker [formControl]='formGroup.get(fields.end)'\n                                    [isAllDay]='getFormValue(fields.isAllDay)?.value'>\n                                </kendo-scheduler-datetime-picker>\n                            </div>\n\n                            <ng-container *ngIf=\"isEndTimeZoneVisible\">\n                                <div class='k-edit-label'>\n                                    <label (click)=\"endTzPicker.focus()\">{{ textFor('editorEventEndTimeZone') }}</label>\n                                </div>\n\n                                <div class='k-edit-field'>\n                                    <kendo-timezone-editor #endTzPicker [formControl]='formGroup.get(fields.endTimezone)'></kendo-timezone-editor>\n                                </div>\n                            </ng-container>\n\n                            <div class='k-edit-field' *ngIf=\"hasAllDay\">\n                                <input type='checkbox' id='k-is-allday-chkbox' class='k-checkbox' [formControl]='formGroup.get(fields.isAllDay)' />\n                                <label class='k-checkbox-label' for='k-is-allday-chkbox'>{{ textFor('editorEventAllDay') }}</label>\n                            </div>\n\n                            <div class='k-edit-field' *ngIf=\"hasStartTimeZone\">\n                                <input type='checkbox' id='k-set-timezone' class='k-checkbox'\n                                formControlName='startTimezoneCheckbox' />\n                                <label class='k-checkbox-label' for='k-set-timezone'>{{ textFor('editorEventTimeZone') }}</label>\n\n                                <ng-container *ngIf=\"isStartTimeZoneVisible && hasEndTimeZone\">\n                                    <input type='checkbox' id='k-use-separate' class='k-checkbox' formControlName='endTimezoneCheckbox' />\n                                    <label class='k-checkbox-label' for='k-use-separate'>{{ textFor('editorEventSeparateTimeZones') }}</label>\n                                </ng-container>\n                            </div>\n\n                            <ng-container *ngIf=\"isEditingSeries\">\n                                <kendo-recurrence-editor\n                                    [formControl]='formGroup.get(fields.recurrenceRule)'\n                                    [start]='initialStart'\n                                    [timezone]='timezone'\n                                ></kendo-recurrence-editor>\n                            </ng-container>\n\n                            <ng-container *ngIf='getFormValue(fields.description)'>\n                                <div class='k-edit-label'>\n                                    <label for='k-event-description'>{{ textFor('editorEventDescription') }}</label>\n                                </div>\n                                <div class='k-edit-field'>\n                                    <textarea id='k-event-description' class='k-textbox' [formControl]='formGroup.get(fields.description)'></textarea>\n                                </div>\n                            </ng-container>\n\n                            <ng-container *ngFor='let resource of resources'>\n                                <ng-container *ngIf='getFormValue(resource.field)'>\n                                    <div class='k-edit-label'>\n                                        <label (click)=\"onResourceClick(resource)\">\n                                            {{ resource.name ? resource.name : resource.field }}\n                                        </label>\n                                    </div>\n                                    <div class='k-edit-field'>\n                                        <kendo-multiple-resource-editor\n                                            *ngIf='resource.multiple'\n                                            [formControl]='formGroup.get(resource.field)'\n                                            [resource]='resource'>\n                                        </kendo-multiple-resource-editor>\n                                        <kendo-single-resource-editor\n                                            *ngIf='!resource.multiple'\n                                            [formControl]='formGroup.get(resource.field)'\n                                            [resource]='resource'>\n                                        </kendo-single-resource-editor>\n                                    </div>\n                                </ng-container>\n                            </ng-container>\n                        </form>\n                    </div>\n                </div>\n            </ng-container>\n\n            <ng-container *ngIf='editTemplate'>\n                <form novalidate [formGroup]='formGroup'>\n                    <ng-container [ngTemplateOutlet]='editTemplate.templateRef'\n                        [ngTemplateOutletContext]=\"{\n                            $implicit: formGroup,\n                            formGroup: formGroup,\n                            dataItem: editedEvent,\n                            editMode: editMode,\n                            isNew: isNew\n                        }\">\n                    </ng-container>\n                </form>\n            </ng-container>\n\n            <kendo-dialog-actions>\n                <button class=\"k-button\" (click)=\"onCancel($event)\">{{ textFor('cancel') }}</button>\n                <button class=\"k-button k-primary\" (click)=\"onSave($event)\" [disabled]=\"!formGroup.valid\">{{ textFor('save') }}</button>\n            </kendo-dialog-actions>\n        </kendo-dialog>\n    "
                },] },
    ];
    /** @nocollapse */
    EditDialogComponent.ctorParameters = function () { return [
        { type: core_1.NgZone, },
        { type: edit_service_1.EditService, },
        { type: kendo_angular_l10n_1.LocalizationService, },
        { type: core_1.ChangeDetectorRef, },
    ]; };
    EditDialogComponent.propDecorators = {
        'multipleResourceEditors': [{ type: core_1.ViewChildren, args: [resource_multiple_editor_component_1.MultipleResourceEditorComponent,] },],
        'singleResourceEditors': [{ type: core_1.ViewChildren, args: [resource_single_editor_component_1.SingleResourceEditorComponent,] },],
        'resources': [{ type: core_1.Input },],
        'timezone': [{ type: core_1.Input },],
        'fields': [{ type: core_1.Input },],
        'editTemplate': [{ type: core_1.Input },],
    };
    return EditDialogComponent;
}());
exports.EditDialogComponent = EditDialogComponent;
