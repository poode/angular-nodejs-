import { TemplateRef, ElementRef, EventEmitter } from '@angular/core';
import { ToolBarToolComponent } from './toolbar-tool.component';
import { PopupSettings } from '../popup-settings';
/**
 * Represents the [Kendo UI ToolBar DropDownButton for Angular]({% slug controltypes_toolbar %}#toc-dropdownbuttons).
 */
export declare class ToolBarDropDownButtonComponent extends ToolBarToolComponent {
    /**
     * Sets the text of the DropDownButton
     * ([see example]({% slug controltypes_toolbar %}#toc-dropdownbuttons).
     */
    text: string;
    /**
     * Defines an icon that will be rendered next to the button text.
     */
    icon: string;
    /**
     * Defines an icon with a custom CSS class that ill be rendered next to the button text.
     */
    iconClass: string;
    /**
     * Defines the location of an image that will be displayed next to the button text.
     */
    imageUrl: string;
    /**
     * Configures the popup of the DropDownButton.
     *
     * The available options are:
     * - `animate:Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `popupClass:String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     */
    popupSettings: PopupSettings;
    /**
     * Sets the data item field that represents the item text.
     * If the data contains only primitive values, do not define it.
     */
    textField: string;
    /**
     * Sets the disabled state of the DropDownButton.
     */
    disabled: boolean;
    /**
     * Sets the data of the DropDownButton
     * ([see example]({% slug controltypes_toolbar %}#toc-dropdownbuttons).
     *
     * > The data has to be provided in an array-like list.
     */
    data: any[];
    /**
     * Fires each time the user clicks a drop-down list item.
     * The event data contains the data item that is bound to the clicked list item.
     */
    itemClick: EventEmitter<any>;
    toolbarTemplate: TemplateRef<any>;
    popupTemplate: TemplateRef<any>;
    dropdownButton: ElementRef;
    private _data;
    private _popupSettings;
    /**
     * @hidden
     */
    readonly listData: any[];
    constructor();
}
