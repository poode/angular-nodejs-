import { Component, forwardRef, ViewChild, Input, ElementRef, EventEmitter, Output } from '@angular/core';
import { ToolBarToolComponent } from './toolbar-tool.component';
import { SingleFocusableNavigationService } from '../navigation/single-focusable-navigation.service';
/**
 * Represents the [Kendo UI ToolBar DropDownButton for Angular]({% slug controltypes_toolbar %}#toc-dropdownbuttons).
 */
export class ToolBarDropDownButtonComponent extends ToolBarToolComponent {
    constructor() {
        super();
        /**
         * Sets the text of the DropDownButton
         * ([see example]({% slug controltypes_toolbar %}#toc-dropdownbuttons).
         */
        this.text = "";
        /**
         * Defines an icon that will be rendered next to the button text.
         */
        this.icon = "";
        /**
         * Defines an icon with a custom CSS class that ill be rendered next to the button text.
         */
        this.iconClass = "";
        /**
         * Defines the location of an image that will be displayed next to the button text.
         */
        this.imageUrl = "";
        /**
         * Sets the data item field that represents the item text.
         * If the data contains only primitive values, do not define it.
         */
        this.textField = "text";
        /**
         * Fires each time the user clicks a drop-down list item.
         * The event data contains the data item that is bound to the clicked list item.
         */
        this.itemClick = new EventEmitter();
        this._popupSettings = { animate: true, popupClass: "" };
        this.navigationService = new SingleFocusableNavigationService();
    }
    /**
     * Configures the popup of the DropDownButton.
     *
     * The available options are:
     * - `animate:Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `popupClass:String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     */
    set popupSettings(settings) {
        this._popupSettings = Object.assign({ animate: true, popupClass: "" }, settings);
    }
    get popupSettings() {
        return this._popupSettings;
    }
    /**
     * Sets the data of the DropDownButton
     * ([see example]({% slug controltypes_toolbar %}#toc-dropdownbuttons).
     *
     * > The data has to be provided in an array-like list.
     */
    set data(data) {
        this._data = data || [];
    }
    get data() {
        if (!this._data) {
            this.data = [];
        }
        return this._data;
    }
    /**
     * @hidden
     */
    get listData() {
        const mainButtonSettings = {
            [this.textField]: this.text,
            icon: this.icon,
            iconClass: this.iconClass,
            imageUrl: this.imageUrl,
            disabled: this.disabled,
            tabIndex: this.tabIndex
        };
        return [mainButtonSettings, ...this.data];
    }
}
ToolBarDropDownButtonComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'kendoToolBarDropDownButton',
                // tslint:disable-next-line:no-forward-ref
                providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => ToolBarDropDownButtonComponent) }],
                selector: 'kendo-toolbar-dropdownbutton',
                template: `
        <ng-template #toolbarTemplate>
            <kendo-dropdownbutton
                [icon]="icon"
                [iconClass]="iconClass"
                [imageUrl]="imageUrl"
                [disabled]="disabled"
                [tabIndex]="tabIndex"
                [data]="data"
                [textField]="textField"
                (itemClick)="itemClick.emit($event)">
                {{ text }}
            </kendo-dropdownbutton>
        </ng-template>
        <ng-template #popupTemplate>
            <kendo-toolbar-buttonlist
                [data]="listData"
                [textField]="textField"
                (itemClick)="itemClick.emit($event)">
            </kendo-toolbar-buttonlist>
        </ng-template>
    `
            },] },
];
/** @nocollapse */
ToolBarDropDownButtonComponent.ctorParameters = () => [];
ToolBarDropDownButtonComponent.propDecorators = {
    'text': [{ type: Input },],
    'icon': [{ type: Input },],
    'iconClass': [{ type: Input },],
    'imageUrl': [{ type: Input },],
    'popupSettings': [{ type: Input },],
    'textField': [{ type: Input },],
    'disabled': [{ type: Input },],
    'data': [{ type: Input },],
    'itemClick': [{ type: Output },],
    'toolbarTemplate': [{ type: ViewChild, args: ["toolbarTemplate",] },],
    'popupTemplate': [{ type: ViewChild, args: ["popupTemplate",] },],
    'dropdownButton': [{ type: ViewChild, args: ["dropdownButton", { read: ElementRef },] },],
};
