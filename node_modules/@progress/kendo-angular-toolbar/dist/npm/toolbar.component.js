"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var kendo_angular_popup_1 = require("@progress/kendo-angular-popup");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
var refresh_service_1 = require("./refresh.service");
var navigation_service_1 = require("./navigation.service");
var toolbar_tool_component_1 = require("./tools/toolbar-tool.component");
var util_1 = require("./util");
var keys_1 = require("./common/keys");
var preventable_event_1 = require("./common/preventable-event");
var renderer_component_1 = require("./renderer.component");
var filter_1 = require("rxjs/operators/filter");
/**
 * Represents the [Kendo UI ToolBar component for Angular]({% slug overview_toolbar %}).
 */
var ToolBarComponent = /** @class */ (function () {
    function ToolBarComponent(localization, popupService, refreshService, navigationService, element, cdr) {
        this.localization = localization;
        this.popupService = popupService;
        this.refreshService = refreshService;
        this.navigationService = navigationService;
        this.element = element;
        this.cdr = cdr;
        /**
         * @hidden
         */
        this.resizable = false;
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the ToolBar.
         */
        this.tabindex = 0;
        /**
         * @hidden
         */
        this.open = new core_1.EventEmitter();
        /**
         * @hidden
         */
        this.close = new core_1.EventEmitter();
        this._popupSettings = { animate: true };
        this.direction = localization.rtl ? 'rtl' : 'ltr';
    }
    Object.defineProperty(ToolBarComponent.prototype, "popupSettings", {
        get: function () {
            return this._popupSettings;
        },
        /**
         * Configures the popup of the DropDownList.
         *
         * The available options are:
         * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
         * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
         */
        set: function (settings) {
            this._popupSettings = Object.assign({}, { animate: true }, settings);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarComponent.prototype, "tabIndex", {
        get: function () {
            return this.tabindex;
        },
        /**
         * @hidden
         */
        set: function (tabIndex) {
            this.tabindex = tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarComponent.prototype, "appendTo", {
        get: function () {
            var appendTo = this.popupSettings.appendTo;
            if (!appendTo || appendTo === "root") {
                return undefined;
            }
            return appendTo === "component" ? this.container : appendTo;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarComponent.prototype, "popupOpen", {
        get: function () {
            return this._open;
        },
        set: function (open) {
            if (this.popupOpen === open) {
                return;
            }
            var eventArgs = new preventable_event_1.PreventableEvent();
            if (open) {
                this.open.emit(eventArgs);
            }
            else {
                this.close.emit(eventArgs);
            }
            if (eventArgs.isDefaultPrevented()) {
                return;
            }
            this.toggle(open);
        },
        enumerable: true,
        configurable: true
    });
    ToolBarComponent.prototype.onFocus = function () {
        var focused = this.navigationService.focused;
        if (focused) {
            this.navigationService.focus(focused);
            return;
        }
        this.navigationService.focusFirst();
    };
    ToolBarComponent.prototype.onKeyDown = function (event) {
        var prev = this.direction === "ltr" ? event.keyCode === keys_1.Keys.left : event.keyCode === keys_1.Keys.right;
        var next = this.direction === "ltr" ? event.keyCode === keys_1.Keys.right : event.keyCode === keys_1.Keys.left;
        if (prev) {
            event.preventDefault();
            this.navigationService.focusPrev();
        }
        if (next) {
            event.preventDefault();
            this.navigationService.focusNext();
        }
        if (event.keyCode === keys_1.Keys.tab) {
            this.element.nativeElement.blur();
        }
        this.navigationService.keydown.emit(event);
    };
    Object.defineProperty(ToolBarComponent.prototype, "getTabIndex", {
        get: function () {
            return this.tabindex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarComponent.prototype, "getRole", {
        get: function () {
            return "toolbar";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarComponent.prototype, "getDir", {
        get: function () {
            return this.direction;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarComponent.prototype, "className", {
        get: function () {
            return "k-widget k-toolbar";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarComponent.prototype, "resizableClass", {
        get: function () {
            return this.resizable;
        },
        enumerable: true,
        configurable: true
    });
    ToolBarComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.resizable) {
            this.resizeSubscription = this.resizeSensor.resize
                .pipe(filter_1.filter(function () { return _this.resizable; }))
                .subscribe(this.onResize.bind(this));
            this.resizeSensor.resize.emit();
            this.navigationService.overflowButton = this.overflowButton;
        }
    };
    ToolBarComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.localizationChangesSubscription = this.localization
            .changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            return _this.direction = rtl ? 'rtl' : 'ltr';
        });
    };
    ToolBarComponent.prototype.ngOnDestroy = function () {
        if (this.resizeSubscription) {
            this.resizeSubscription.unsubscribe();
        }
        if (this.localizationChangesSubscription) {
            this.localizationChangesSubscription.unsubscribe();
        }
    };
    ToolBarComponent.prototype.showPopup = function () {
        this.popupOpen = !this.popupOpen;
    };
    ToolBarComponent.prototype.toggle = function (popupOpen) {
        var _this = this;
        this._open = (popupOpen !== undefined) ? popupOpen : !this.popupOpen;
        if (this.popupRef) {
            this.popupRef.close();
            this.popupRef = null;
        }
        if (this.popupOpen) {
            this.popupRef = this.popupService.open({
                anchor: this.overflowButton,
                content: this.popupTemplate,
                appendTo: this.appendTo,
                animate: this.popupSettings.animate,
                popupClass: this.popupSettings.popupClass,
                positionMode: "absolute"
            });
            this.popupRef.popupOpen.subscribe(this.onPopupOpen.bind(this));
            this.popupRef.popupClose.subscribe(this.onPopupClose.bind(this));
            this.popupRef.popupAnchorViewportLeave.subscribe(function () { return _this.popupOpen = false; });
        }
    };
    ToolBarComponent.prototype.onResize = function () {
        this.toggle(false);
        var containerWidth = util_1.innerWidth(this.element.nativeElement) - this.overflowAnchorWidth;
        this.shrink(containerWidth, this.childrenWidth);
        this.stretch(containerWidth, this.childrenWidth);
        this.cdr.detectChanges();
        this.resizeSensor.acceptSize();
    };
    ToolBarComponent.prototype.onPopupOpen = function () {
        this.navigationService.moveFocusToPopup();
    };
    ToolBarComponent.prototype.onPopupClose = function () {
        this.navigationService.moveFocusToToolBar();
    };
    Object.defineProperty(ToolBarComponent.prototype, "displayAnchor", {
        get: function () {
            return this.overflowTools.length ? "visible" : "hidden";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarComponent.prototype, "overflowAnchorWidth", {
        get: function () {
            if (!this.resizable) {
                return 0;
            }
            if (!this.cachedOverflowAnchorWidth) {
                this.cachedOverflowAnchorWidth = util_1.outerWidth(this.overflowButton.nativeElement);
            }
            return this.cachedOverflowAnchorWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarComponent.prototype, "childrenWidth", {
        get: function () {
            var width = 0;
            this.renderedTools.forEach(function (container) {
                width += container.width;
            });
            width += this.overflowAnchorWidth;
            return Math.ceil(width);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarComponent.prototype, "visibleTools", {
        get: function () {
            return this.allTools.filter(function (tool) {
                return tool.overflows === false;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarComponent.prototype, "overflowTools", {
        get: function () {
            return this.allTools.filter(function (tool) {
                return tool.overflows === true;
            });
        },
        enumerable: true,
        configurable: true
    });
    ToolBarComponent.prototype.shrink = function (containerWidth, childrenWidth) {
        var width;
        if (containerWidth < childrenWidth) {
            for (var i = this.visibleTools.length - 1; i >= 0; i--) {
                if (containerWidth > childrenWidth) {
                    break;
                }
                else {
                    width = this.hideLastVisibleTool();
                    childrenWidth -= width;
                }
            }
        }
    };
    ToolBarComponent.prototype.stretch = function (containerWidth, childrenWidth) {
        var width;
        if (containerWidth > childrenWidth) {
            for (var i = this.overflowTools.length - 1; i >= 0; i--) {
                width = this.showFirstHiddenTool(containerWidth, childrenWidth);
                if (width) {
                    childrenWidth += width;
                }
                else {
                    break;
                }
            }
        }
    };
    ToolBarComponent.prototype.hideLastVisibleTool = function () {
        var tool = this.visibleTools[this.visibleTools.length - 1];
        var renderedElement = this.renderedTools.find(function (r) {
            return r.tool === tool;
        });
        var width = renderedElement.width;
        tool.overflows = true;
        this.refreshService.refresh(tool);
        return width;
    };
    ToolBarComponent.prototype.showFirstHiddenTool = function (containerWidth, childrenWidth) {
        var tool = this.overflowTools[0];
        var renderedElement = this.renderedTools.find(function (r) {
            return r.tool === tool;
        });
        tool.overflows = false;
        tool.visibility = "hidden";
        this.refreshService.refresh(tool);
        if (containerWidth > childrenWidth + renderedElement.width) {
            tool.visibility = "visible";
            this.refreshService.refresh(tool);
        }
        else {
            tool.overflows = true;
            this.refreshService.refresh(tool);
        }
        return renderedElement.width; //returns 0 if `overflows` is true
    };
    ToolBarComponent.decorators = [
        { type: core_1.Component, args: [{
                    exportAs: 'kendoToolBar',
                    providers: [
                        refresh_service_1.RefreshService,
                        navigation_service_1.NavigationService,
                        kendo_angular_l10n_1.LocalizationService,
                        {
                            provide: kendo_angular_l10n_1.L10N_PREFIX,
                            useValue: 'kendo.toolbar'
                        }
                    ],
                    selector: 'kendo-toolbar',
                    template: "\n        <ng-container *ngFor=\"let tool of allTools; let index = index;\">\n            <kendo-toolbar-renderer [location]=\"'toolbar'\" [resizable]=\"resizable\" [tool]=\"tool\"></kendo-toolbar-renderer>\n        </ng-container>\n        <button #overflowButton\n            tabindex=\"-1\" *ngIf=\"resizable\" [style.visibility]=\"displayAnchor\" class=\"k-overflow-anchor k-button\" (click)=\"showPopup()\">\n            <span class=\"k-icon k-i-more-vertical\"></span>\n        </button>\n        <ng-template #popupTemplate>\n            <ul class=\"k-overflow-container k-list-container k-reset\">\n                <ng-container *ngFor=\"let tool of allTools; let index = index;\">\n                    <kendo-toolbar-renderer [location]=\"'overflow'\" [resizable]=\"resizable\" [tool]=\"tool\"></kendo-toolbar-renderer>\n                </ng-container>\n            </ul>\n        </ng-template>\n        <ng-container #container></ng-container>\n        <kendo-resize-sensor *ngIf=\"resizable\" [rateLimit]=\"1000\" #resizeSensor></kendo-resize-sensor>\n    "
                },] },
    ];
    /** @nocollapse */
    ToolBarComponent.ctorParameters = function () { return [
        { type: kendo_angular_l10n_1.LocalizationService, },
        { type: kendo_angular_popup_1.PopupService, },
        { type: refresh_service_1.RefreshService, },
        { type: navigation_service_1.NavigationService, },
        { type: core_1.ElementRef, },
        { type: core_1.ChangeDetectorRef, },
    ]; };
    ToolBarComponent.propDecorators = {
        'resizable': [{ type: core_1.Input },],
        'popupSettings': [{ type: core_1.Input },],
        'tabindex': [{ type: core_1.Input },],
        'tabIndex': [{ type: core_1.Input, args: ["tabIndex",] },],
        'open': [{ type: core_1.Output },],
        'close': [{ type: core_1.Output },],
        'allTools': [{ type: core_1.ContentChildren, args: [toolbar_tool_component_1.ToolBarToolComponent,] },],
        'overflowButton': [{ type: core_1.ViewChild, args: ["overflowButton",] },],
        'popupTemplate': [{ type: core_1.ViewChild, args: ["popupTemplate",] },],
        'resizeSensor': [{ type: core_1.ViewChild, args: ["resizeSensor",] },],
        'container': [{ type: core_1.ViewChild, args: ["container", { read: core_1.ViewContainerRef },] },],
        'renderedTools': [{ type: core_1.ViewChildren, args: [renderer_component_1.ToolBarRendererComponent,] },],
        'onFocus': [{ type: core_1.HostListener, args: ["focus",] },],
        'onKeyDown': [{ type: core_1.HostListener, args: ["keydown", ["$event"],] },],
        'getTabIndex': [{ type: core_1.HostBinding, args: ["attr.tabindex",] },],
        'getRole': [{ type: core_1.HostBinding, args: ["attr.role",] },],
        'getDir': [{ type: core_1.HostBinding, args: ["attr.dir",] },],
        'className': [{ type: core_1.HostBinding, args: ["class",] },],
        'resizableClass': [{ type: core_1.HostBinding, args: ["class.k-toolbar-resizable",] },],
    };
    return ToolBarComponent;
}());
exports.ToolBarComponent = ToolBarComponent;
