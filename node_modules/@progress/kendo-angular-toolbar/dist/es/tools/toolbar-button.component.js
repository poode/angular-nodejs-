import * as tslib_1 from "tslib";
import { Component, forwardRef, ViewChild, Input, Output, EventEmitter } from '@angular/core';
import { ToolBarToolComponent } from './toolbar-tool.component';
import { isChanged } from '../util';
import { Button } from '@progress/kendo-angular-buttons';
import { SingleFocusableNavigationService } from '../navigation/single-focusable-navigation.service';
/**
 * @hidden
 */
export var display = function (property, displayMode, overflows) {
    switch (displayMode) {
        case "toolbar":
            return overflows ? undefined : property;
        case "overflow":
            return overflows ? property : undefined;
        default:
            return property;
    }
};
/**
 * Represents the [Kendo UI ToolBar Button tool for Angular]({% slug controltypes_toolbar %}#toc-buttons).
 */
var ToolBarButtonComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ToolBarButtonComponent, _super);
    function ToolBarButtonComponent() {
        var _this = _super.call(this) || this;
        /**
         * @hidden
         */
        _this.showText = "both";
        /**
         * Provides visual styling that indicates if the Button is active
         * ([see example]({% slug controltypes_toolbar %}#toc-toggle-buttons)).
         * By default, `toggleable` is set to `false`.
         */
        _this.toggleable = false;
        /**
         * Adds visual weight to the Button and makes it primary
         * ([see example]({% slug controltypes_toolbar %}#toc-buttons)).
         */
        _this.primary = false;
        /**
         * Changes the visual appearance by using alternative styling options
         * ([see example]({% slug controltypes_toolbar %}#toc-buttons)).
         *
         * The available values are:
         * * `bare`
         * * `flat`
         * * `outline`
         */
        _this.look = "default";
        /**
         * Sets the selected state of the Button.
         */
        _this.selected = false;
        /**
         * @hidden
         */
        _this.showIcon = "both";
        /**
         * Fires each time the Button is clicked.
         */
        _this.click = new EventEmitter();
        /**
         * Fires each time the selected state of a Toggle Button is changed.
         * The event argument is the new selected state (Boolean).
         */
        _this.selectedChange = new EventEmitter();
        _this.internalState = { selected: undefined };
        _this.navigationService = new SingleFocusableNavigationService();
        return _this;
    }
    Object.defineProperty(ToolBarButtonComponent.prototype, "text", {
        get: function () {
            return display(this._text, this.showText, this.overflows);
        },
        /**
         * Specifies the text of the Button ([see example]({% slug controltypes_toolbar %}#toc-buttons)).
         */
        set: function (text) {
            this._text = text;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarButtonComponent.prototype, "togglable", {
        /**
         * @hidden
         */
        get: function () {
            return this.toggleable;
        },
        set: function (value) {
            this.toggleable = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarButtonComponent.prototype, "icon", {
        get: function () {
            return display(this._icon, this.showIcon, this.overflows);
        },
        /**
         * Defines the name for an existing icon in a Kendo UI theme
         * ([see example]({% slug controltypes_toolbar %}#toc-buttons)).
         * The icon is rendered inside the Button by a `span.k-icon` element.
         */
        set: function (icon) {
            this._icon = icon;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarButtonComponent.prototype, "iconClass", {
        get: function () {
            return display(this._iconClass, this.showIcon, this.overflows);
        },
        /**
         * Defines a CSS class&mdash;or multiple classes separated by spaces&mdash;
         * which are applied to a `span` element inside the Button. Allows the usage of custom icons.
         */
        set: function (iconClass) {
            this._iconClass = iconClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarButtonComponent.prototype, "imageUrl", {
        get: function () {
            return display(this._imageUrl, this.showIcon, this.overflows);
        },
        /**
         * Defines a URL which is used for an `img` element inside the Button.
         * The URL can be relative or absolute. If relative, it is evaluated with relation to the web page URL.
         */
        set: function (imageUrl) {
            this._imageUrl = imageUrl;
        },
        enumerable: true,
        configurable: true
    });
    ToolBarButtonComponent.prototype.ngOnChanges = function (changes) {
        if (isChanged("selected", changes)) {
            this.internalState.selected = this.selected;
        }
    };
    ToolBarButtonComponent.prototype.selectedChangeHandler = function (state) {
        this.internalState.selected = state;
        this.selectedChange.emit(state);
    };
    ToolBarButtonComponent.decorators = [
        { type: Component, args: [{
                    exportAs: 'kendoToolBarButton',
                    // tslint:disable-next-line:no-forward-ref
                    providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(function () { return ToolBarButtonComponent; }) }],
                    selector: 'kendo-toolbar-button',
                    template: "\n        <ng-template #toolbarTemplate>\n            <button #toolbarButton tabindex=\"-1\" type=\"button\" kendoButton\n                [ngStyle]=\"style\"\n                [ngClass]=\"className\"\n                [attr.title]=\"title\"\n                [disabled]=\"disabled\"\n                [toggleable]=\"toggleable\"\n                [primary]=\"primary\"\n                [selected]=\"internalState.selected\"\n                [icon]=\"icon\"\n                [iconClass]=\"iconClass\"\n                [imageUrl]=\"imageUrl\"\n                [look]=\"look\"\n                (click)=\"click.emit($event)\"\n                (selectedChange)=\"selectedChangeHandler($event)\">\n                {{ text }}\n            </button>\n        </ng-template>\n        <ng-template #popupTemplate>\n            <button #overflowButton tabindex=\"-1\" type=\"button\" kendoButton\n                class=\"k-overflow-button\"\n                [ngStyle]=\"style\"\n                [ngClass]=\"className\"\n                [attr.title]=\"title\"\n                [disabled]=\"disabled\"\n                [toggleable]=\"toggleable\"\n                [primary]=\"primary\"\n                [selected]=\"internalState.selected\"\n                [icon]=\"icon\"\n                [iconClass]=\"iconClass\"\n                [imageUrl]=\"imageUrl\"\n                [look]=\"look\"\n                (click)=\"click.emit($event)\"\n                (selectedChange)=\"selectedChangeHandler($event)\">\n                {{ text }}\n            </button>\n        </ng-template>\n    "
                },] },
    ];
    /** @nocollapse */
    ToolBarButtonComponent.ctorParameters = function () { return []; };
    ToolBarButtonComponent.propDecorators = {
        'text': [{ type: Input },],
        'showText': [{ type: Input },],
        'style': [{ type: Input },],
        'className': [{ type: Input },],
        'title': [{ type: Input },],
        'disabled': [{ type: Input },],
        'toggleable': [{ type: Input },],
        'togglable': [{ type: Input },],
        'primary': [{ type: Input },],
        'look': [{ type: Input },],
        'selected': [{ type: Input },],
        'icon': [{ type: Input },],
        'iconClass': [{ type: Input },],
        'imageUrl': [{ type: Input },],
        'showIcon': [{ type: Input },],
        'click': [{ type: Output },],
        'selectedChange': [{ type: Output },],
        'toolbarTemplate': [{ type: ViewChild, args: ["toolbarTemplate",] },],
        'popupTemplate': [{ type: ViewChild, args: ["popupTemplate",] },],
        'button': [{ type: ViewChild, args: ["toolbarButton", { read: Button },] },],
    };
    return ToolBarButtonComponent;
}(ToolBarToolComponent));
export { ToolBarButtonComponent };
