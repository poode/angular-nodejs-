import * as tslib_1 from "tslib";
import { Component, forwardRef, ViewChild, Input, ElementRef, EventEmitter, Output } from '@angular/core';
import { ToolBarToolComponent } from './toolbar-tool.component';
import { SingleFocusableNavigationService } from '../navigation/single-focusable-navigation.service';
/**
 * Represents the [Kendo UI ToolBar DropDownButton for Angular]({% slug controltypes_toolbar %}#toc-dropdownbuttons).
 */
var ToolBarDropDownButtonComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ToolBarDropDownButtonComponent, _super);
    function ToolBarDropDownButtonComponent() {
        var _this = _super.call(this) || this;
        /**
         * Sets the text of the DropDownButton
         * ([see example]({% slug controltypes_toolbar %}#toc-dropdownbuttons).
         */
        _this.text = "";
        /**
         * Defines an icon that will be rendered next to the button text.
         */
        _this.icon = "";
        /**
         * Defines an icon with a custom CSS class that ill be rendered next to the button text.
         */
        _this.iconClass = "";
        /**
         * Defines the location of an image that will be displayed next to the button text.
         */
        _this.imageUrl = "";
        /**
         * Sets the data item field that represents the item text.
         * If the data contains only primitive values, do not define it.
         */
        _this.textField = "text";
        /**
         * Fires each time the user clicks a drop-down list item.
         * The event data contains the data item that is bound to the clicked list item.
         */
        _this.itemClick = new EventEmitter();
        _this._popupSettings = { animate: true, popupClass: "" };
        _this.navigationService = new SingleFocusableNavigationService();
        return _this;
    }
    Object.defineProperty(ToolBarDropDownButtonComponent.prototype, "popupSettings", {
        get: function () {
            return this._popupSettings;
        },
        /**
         * Configures the popup of the DropDownButton.
         *
         * The available options are:
         * - `animate:Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
         * - `popupClass:String`&mdash;Specifies a list of CSS classes that are used to style the popup.
         */
        set: function (settings) {
            this._popupSettings = Object.assign({ animate: true, popupClass: "" }, settings);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarDropDownButtonComponent.prototype, "data", {
        get: function () {
            if (!this._data) {
                this.data = [];
            }
            return this._data;
        },
        /**
         * Sets the data of the DropDownButton
         * ([see example]({% slug controltypes_toolbar %}#toc-dropdownbuttons).
         *
         * > The data has to be provided in an array-like list.
         */
        set: function (data) {
            this._data = data || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarDropDownButtonComponent.prototype, "listData", {
        /**
         * @hidden
         */
        get: function () {
            var mainButtonSettings = (_a = {},
                _a[this.textField] = this.text,
                _a.icon = this.icon,
                _a.iconClass = this.iconClass,
                _a.imageUrl = this.imageUrl,
                _a.disabled = this.disabled,
                _a.tabIndex = this.tabIndex,
                _a);
            return [mainButtonSettings].concat(this.data);
            var _a;
        },
        enumerable: true,
        configurable: true
    });
    ToolBarDropDownButtonComponent.decorators = [
        { type: Component, args: [{
                    exportAs: 'kendoToolBarDropDownButton',
                    // tslint:disable-next-line:no-forward-ref
                    providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(function () { return ToolBarDropDownButtonComponent; }) }],
                    selector: 'kendo-toolbar-dropdownbutton',
                    template: "\n        <ng-template #toolbarTemplate>\n            <kendo-dropdownbutton\n                [icon]=\"icon\"\n                [iconClass]=\"iconClass\"\n                [imageUrl]=\"imageUrl\"\n                [disabled]=\"disabled\"\n                [tabIndex]=\"tabIndex\"\n                [data]=\"data\"\n                [textField]=\"textField\"\n                (itemClick)=\"itemClick.emit($event)\">\n                {{ text }}\n            </kendo-dropdownbutton>\n        </ng-template>\n        <ng-template #popupTemplate>\n            <kendo-toolbar-buttonlist\n                [data]=\"listData\"\n                [textField]=\"textField\"\n                (itemClick)=\"itemClick.emit($event)\">\n            </kendo-toolbar-buttonlist>\n        </ng-template>\n    "
                },] },
    ];
    /** @nocollapse */
    ToolBarDropDownButtonComponent.ctorParameters = function () { return []; };
    ToolBarDropDownButtonComponent.propDecorators = {
        'text': [{ type: Input },],
        'icon': [{ type: Input },],
        'iconClass': [{ type: Input },],
        'imageUrl': [{ type: Input },],
        'popupSettings': [{ type: Input },],
        'textField': [{ type: Input },],
        'disabled': [{ type: Input },],
        'data': [{ type: Input },],
        'itemClick': [{ type: Output },],
        'toolbarTemplate': [{ type: ViewChild, args: ["toolbarTemplate",] },],
        'popupTemplate': [{ type: ViewChild, args: ["popupTemplate",] },],
        'dropdownButton': [{ type: ViewChild, args: ["dropdownButton", { read: ElementRef },] },],
    };
    return ToolBarDropDownButtonComponent;
}(ToolBarToolComponent));
export { ToolBarDropDownButtonComponent };
