import * as tslib_1 from "tslib";
import { Component, forwardRef, ViewChild, Input, ElementRef, Output, EventEmitter } from '@angular/core';
import { ToolBarToolComponent } from './toolbar-tool.component';
import { SingleFocusableNavigationService } from '../navigation/single-focusable-navigation.service';
/**
 * Represents the [Kendo UI ToolBar SplitButton for Angular]({% slug controltypes_toolbar %}#toc-splitbuttons).
 */
var ToolBarSplitButtonComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ToolBarSplitButtonComponent, _super);
    function ToolBarSplitButtonComponent() {
        var _this = _super.call(this) || this;
        /**
         * Sets the text of the SplitButton ([see example]({% slug controltypes_toolbar %}#toc-splitbuttons).
         */
        _this.text = "";
        /**
         * Defines the icon that will be rendered next to the button text
         * ([see example]({% slug controltypes_toolbar %}#toc-splitbuttons)).
         */
        _this.icon = "";
        /**
         * Defines an icon with a custom CSS class that will be rendered next to the button text.
         */
        _this.iconClass = "";
        /**
         * Defines the location of an image that will be displayed next to the button text.
         */
        _this.imageUrl = "";
        /**
         * Configures the text field of the button-list popup.
         */
        _this.textField = "text";
        /**
         * Fires each time the user clicks the main button.
         */
        _this.buttonClick = new EventEmitter();
        /**
         * Fires each time the user clicks the drop-down list.
         * The event data contains the data item that is bound to the clicked list item.
         */
        _this.itemClick = new EventEmitter();
        _this._popupSettings = { animate: true, popupClass: "" };
        _this.navigationService = new SingleFocusableNavigationService();
        return _this;
    }
    Object.defineProperty(ToolBarSplitButtonComponent.prototype, "popupSettings", {
        get: function () {
            if (!this._popupSettings) {
                this._popupSettings = { animate: true, popupClass: "" };
            }
            return this._popupSettings;
        },
        /**
         * Configures the popup of the SplitButton.
         *
         * The available options are:
         * - `animate:Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
         * - `popupClass:String`&mdash;Specifies a list of CSS classes that are used to style the popup.
         */
        set: function (value) {
            this._popupSettings = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarSplitButtonComponent.prototype, "data", {
        get: function () {
            if (!this._data) {
                this.data = [];
            }
            return this._data;
        },
        /**
         * Sets the data of the SplitButton ([see example]({% slug controltypes_toolbar %}#toc-splitbuttons).
         *
         * > The data has to be provided in an array-like list.
         */
        set: function (data) {
            this._data = data || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolBarSplitButtonComponent.prototype, "listData", {
        /**
         * @hidden
         */
        get: function () {
            var mainButtonSettings = (_a = {},
                _a[this.textField] = this.text,
                _a.icon = this.icon,
                _a.iconClass = this.iconClass,
                _a.imageUrl = this.imageUrl,
                _a.disabled = this.disabled,
                _a.tabIndex = this.tabIndex,
                _a);
            var listData = this.data.slice(0);
            listData.unshift(mainButtonSettings);
            return listData;
            var _a;
        },
        enumerable: true,
        configurable: true
    });
    ToolBarSplitButtonComponent.decorators = [
        { type: Component, args: [{
                    exportAs: 'kendoToolBarSplitButton',
                    // tslint:disable-next-line:no-forward-ref
                    providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(function () { return ToolBarSplitButtonComponent; }) }],
                    selector: 'kendo-toolbar-splitbutton',
                    template: "\n        <ng-template #toolbarTemplate>\n            <kendo-splitbutton\n                [data]=\"data\"\n                [text]=\"text\"\n                [icon]=\"icon\"\n                [iconClass]=\"iconClass\"\n                [imageUrl]=\"imageUrl\"\n                [disabled]=\"disabled\"\n                [tabIndex]=\"tabIndex\"\n                [textField]=\"textField\"\n                (buttonClick)=\"buttonClick.emit($event)\"\n                (itemClick)=\"itemClick.emit($event)\">\n            </kendo-splitbutton>\n        </ng-template>\n        <ng-template #popupTemplate>\n            <kendo-toolbar-buttonlist\n                [data]=\"listData\"\n                [textField]=\"textField\"\n                (itemClick)=\"itemClick.emit($event)\">\n            </kendo-toolbar-buttonlist>\n        </ng-template>\n    "
                },] },
    ];
    /** @nocollapse */
    ToolBarSplitButtonComponent.ctorParameters = function () { return []; };
    ToolBarSplitButtonComponent.propDecorators = {
        'text': [{ type: Input },],
        'icon': [{ type: Input },],
        'iconClass': [{ type: Input },],
        'imageUrl': [{ type: Input },],
        'disabled': [{ type: Input },],
        'popupSettings': [{ type: Input },],
        'textField': [{ type: Input },],
        'data': [{ type: Input },],
        'buttonClick': [{ type: Output },],
        'itemClick': [{ type: Output },],
        'toolbarTemplate': [{ type: ViewChild, args: ["toolbarTemplate",] },],
        'popupTemplate': [{ type: ViewChild, args: ["popupTemplate",] },],
        'splitButton': [{ type: ViewChild, args: ["splitButton", { read: ElementRef },] },],
    };
    return ToolBarSplitButtonComponent;
}(ToolBarToolComponent));
export { ToolBarSplitButtonComponent };
