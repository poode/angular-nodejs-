import { Injectable } from '@angular/core';
import { closest } from '../util';
/**
 * @hidden
 */
var SingleFocusableNavigationService = /** @class */ (function () {
    function SingleFocusableNavigationService() {
    }
    SingleFocusableNavigationService.prototype.register = function (rendererService, location) {
        if (location === "toolbar") {
            this.toolbarRenderer = rendererService;
        }
        else {
            this.overflowRenderer = rendererService;
        }
    };
    SingleFocusableNavigationService.prototype.canFocus = function () {
        var element = this.findFocusable();
        return element && element.offsetParent && !this.hasFocus(element) && !element.disabled;
    };
    SingleFocusableNavigationService.prototype.focus = function () {
        if (this.canFocus()) {
            var element = this.findFocusable();
            this.setAttribute(element, "tabindex", "0");
            element.focus();
        }
    };
    SingleFocusableNavigationService.prototype.defocus = function () {
        var element = this.findFocusable();
        if (element) {
            this.setAttribute(element, "tabindex", "-1");
            if (this.hasFocus(element)) {
                element.blur();
            }
        }
    };
    SingleFocusableNavigationService.prototype.hasFocus = function (element) {
        return document.activeElement !== element && closest(document.activeElement, function (e) { return e === element; });
    };
    SingleFocusableNavigationService.prototype.findFocusable = function () {
        return this.toolbarNavigation.isPopupFocused ? this.overflowRenderer.findFocusable() : this.toolbarRenderer.findFocusable();
    };
    SingleFocusableNavigationService.prototype.setAttribute = function (element, attr, value) {
        if (this.toolbarNavigation.isPopupFocused) {
            this.overflowRenderer.setAttribute(element, attr, value);
        }
        else {
            this.toolbarRenderer.setAttribute(element, attr, value);
        }
    };
    SingleFocusableNavigationService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    SingleFocusableNavigationService.ctorParameters = function () { return []; };
    return SingleFocusableNavigationService;
}());
export { SingleFocusableNavigationService };
